/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "alpha_config_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




ServerItem::~ServerItem() throw() {
}


void ServerItem::__set_host(const std::string& val) {
  this->host = val;
}

void ServerItem::__set_port(const int32_t val) {
  this->port = val;
}

uint32_t ServerItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host);
          this->__isset.host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServerItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServerItem");

  xfer += oprot->writeFieldBegin("host", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->host);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServerItem &a, ServerItem &b) {
  using ::std::swap;
  swap(a.host, b.host);
  swap(a.port, b.port);
  swap(a.__isset, b.__isset);
}

ServerItem::ServerItem(const ServerItem& other0) {
  host = other0.host;
  port = other0.port;
  __isset = other0.__isset;
}
ServerItem& ServerItem::operator=(const ServerItem& other1) {
  host = other1.host;
  port = other1.port;
  __isset = other1.__isset;
  return *this;
}
void ServerItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServerItem(";
  out << "host=" << to_string(host);
  out << ", " << "port=" << to_string(port);
  out << ")";
}


ConfigData::~ConfigData() throw() {
}


void ConfigData::__set_broker_server(const std::map<std::string, std::vector<ServerItem> > & val) {
  this->broker_server = val;
}

void ConfigData::__set_license_data(const std::map<std::string, std::string> & val) {
  this->license_data = val;
}

uint32_t ConfigData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->broker_server.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _ktype3;
            ::apache::thrift::protocol::TType _vtype4;
            xfer += iprot->readMapBegin(_ktype3, _vtype4, _size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              std::string _key7;
              xfer += iprot->readString(_key7);
              std::vector<ServerItem> & _val8 = this->broker_server[_key7];
              {
                _val8.clear();
                uint32_t _size9;
                ::apache::thrift::protocol::TType _etype12;
                xfer += iprot->readListBegin(_etype12, _size9);
                _val8.resize(_size9);
                uint32_t _i13;
                for (_i13 = 0; _i13 < _size9; ++_i13)
                {
                  xfer += _val8[_i13].read(iprot);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.broker_server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->license_data.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _ktype15;
            ::apache::thrift::protocol::TType _vtype16;
            xfer += iprot->readMapBegin(_ktype15, _vtype16, _size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              std::string _key19;
              xfer += iprot->readString(_key19);
              std::string& _val20 = this->license_data[_key19];
              xfer += iprot->readString(_val20);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.license_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConfigData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConfigData");

  xfer += oprot->writeFieldBegin("broker_server", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->broker_server.size()));
    std::map<std::string, std::vector<ServerItem> > ::const_iterator _iter21;
    for (_iter21 = this->broker_server.begin(); _iter21 != this->broker_server.end(); ++_iter21)
    {
      xfer += oprot->writeString(_iter21->first);
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(_iter21->second.size()));
        std::vector<ServerItem> ::const_iterator _iter22;
        for (_iter22 = _iter21->second.begin(); _iter22 != _iter21->second.end(); ++_iter22)
        {
          xfer += (*_iter22).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("license_data", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->license_data.size()));
    std::map<std::string, std::string> ::const_iterator _iter23;
    for (_iter23 = this->license_data.begin(); _iter23 != this->license_data.end(); ++_iter23)
    {
      xfer += oprot->writeString(_iter23->first);
      xfer += oprot->writeString(_iter23->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConfigData &a, ConfigData &b) {
  using ::std::swap;
  swap(a.broker_server, b.broker_server);
  swap(a.license_data, b.license_data);
  swap(a.__isset, b.__isset);
}

ConfigData::ConfigData(const ConfigData& other24) {
  broker_server = other24.broker_server;
  license_data = other24.license_data;
  __isset = other24.__isset;
}
ConfigData& ConfigData::operator=(const ConfigData& other25) {
  broker_server = other25.broker_server;
  license_data = other25.license_data;
  __isset = other25.__isset;
  return *this;
}
void ConfigData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConfigData(";
  out << "broker_server=" << to_string(broker_server);
  out << ", " << "license_data=" << to_string(license_data);
  out << ")";
}


