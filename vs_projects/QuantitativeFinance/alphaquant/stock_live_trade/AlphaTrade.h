/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AlphaTrade_H
#define AlphaTrade_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "alpha_trade_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AlphaTradeIf {
 public:
  virtual ~AlphaTradeIf() {}
  virtual bool Running() = 0;
  virtual int32_t GetPID() = 0;
  virtual void KeepAlive(const std::string& sessionID) = 0;
  virtual void LiveTradeLogin(LiveTradeLoginResp& _return, const std::string& sessionID, const std::string& account, const std::string& password1, const std::string& password2, const std::string& brokerStr) = 0;
  virtual void LiveTradeLogout(LiveTradeLogoutResp& _return, const std::string& sessionID, const std::string& liveTradeID) = 0;
  virtual void GetAccountState(GetAccountStateResp& _return, const std::string& sessionID, const std::string& liveTradeID) = 0;
  virtual void GetAccountBalance(GetAccountBalanceResp& _return, const std::string& sessionID, const std::string& liveTradeID) = 0;
  virtual void GetHoldingStock(GetHoldingStockResp& _return, const std::string& sessionID, const std::string& liveTradeID) = 0;
  virtual void GetAllOrder(GetAllOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID) = 0;
  virtual void GetOrderState(GetOrderStateResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID) = 0;
  virtual void CancelOrder(CancelOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID) = 0;
  virtual void CloseOrder(CloseOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID) = 0;
  virtual void LiveTradeBuyOpen(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType) = 0;
  virtual void LiveTradeBuyClose(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday) = 0;
  virtual void LiveTradeSellClose(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday) = 0;
  virtual void LiveTradeSellOpen(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType) = 0;
};

class AlphaTradeIfFactory {
 public:
  typedef AlphaTradeIf Handler;

  virtual ~AlphaTradeIfFactory() {}

  virtual AlphaTradeIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AlphaTradeIf* /* handler */) = 0;
};

class AlphaTradeIfSingletonFactory : virtual public AlphaTradeIfFactory {
 public:
  AlphaTradeIfSingletonFactory(const boost::shared_ptr<AlphaTradeIf>& iface) : iface_(iface) {}
  virtual ~AlphaTradeIfSingletonFactory() {}

  virtual AlphaTradeIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AlphaTradeIf* /* handler */) {}

 protected:
  boost::shared_ptr<AlphaTradeIf> iface_;
};

class AlphaTradeNull : virtual public AlphaTradeIf {
 public:
  virtual ~AlphaTradeNull() {}
  bool Running() {
    bool _return = false;
    return _return;
  }
  int32_t GetPID() {
    int32_t _return = 0;
    return _return;
  }
  void KeepAlive(const std::string& /* sessionID */) {
    return;
  }
  void LiveTradeLogin(LiveTradeLoginResp& /* _return */, const std::string& /* sessionID */, const std::string& /* account */, const std::string& /* password1 */, const std::string& /* password2 */, const std::string& /* brokerStr */) {
    return;
  }
  void LiveTradeLogout(LiveTradeLogoutResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */) {
    return;
  }
  void GetAccountState(GetAccountStateResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */) {
    return;
  }
  void GetAccountBalance(GetAccountBalanceResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */) {
    return;
  }
  void GetHoldingStock(GetHoldingStockResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */) {
    return;
  }
  void GetAllOrder(GetAllOrderResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */) {
    return;
  }
  void GetOrderState(GetOrderStateResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */, const std::string& /* orderID */) {
    return;
  }
  void CancelOrder(CancelOrderResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */, const std::string& /* orderID */) {
    return;
  }
  void CloseOrder(CloseOrderResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */, const std::string& /* orderID */) {
    return;
  }
  void LiveTradeBuyOpen(PlaceOrderResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */, const std::string& /* sid */, const double /* price */, const double /* quant */, const std::string& /* orderType */) {
    return;
  }
  void LiveTradeBuyClose(PlaceOrderResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */, const std::string& /* sid */, const double /* price */, const double /* quant */, const std::string& /* orderType */, const bool /* closeToday */) {
    return;
  }
  void LiveTradeSellClose(PlaceOrderResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */, const std::string& /* sid */, const double /* price */, const double /* quant */, const std::string& /* orderType */, const bool /* closeToday */) {
    return;
  }
  void LiveTradeSellOpen(PlaceOrderResp& /* _return */, const std::string& /* sessionID */, const std::string& /* liveTradeID */, const std::string& /* sid */, const double /* price */, const double /* quant */, const std::string& /* orderType */) {
    return;
  }
};


class AlphaTrade_Running_args {
 public:

  AlphaTrade_Running_args(const AlphaTrade_Running_args&);
  AlphaTrade_Running_args& operator=(const AlphaTrade_Running_args&);
  AlphaTrade_Running_args() {
  }

  virtual ~AlphaTrade_Running_args() throw();

  bool operator == (const AlphaTrade_Running_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AlphaTrade_Running_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_Running_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_Running_pargs {
 public:


  virtual ~AlphaTrade_Running_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_Running_result__isset {
  _AlphaTrade_Running_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_Running_result__isset;

class AlphaTrade_Running_result {
 public:

  AlphaTrade_Running_result(const AlphaTrade_Running_result&);
  AlphaTrade_Running_result& operator=(const AlphaTrade_Running_result&);
  AlphaTrade_Running_result() : success(0) {
  }

  virtual ~AlphaTrade_Running_result() throw();
  bool success;

  _AlphaTrade_Running_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AlphaTrade_Running_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_Running_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_Running_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_Running_presult__isset {
  _AlphaTrade_Running_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_Running_presult__isset;

class AlphaTrade_Running_presult {
 public:


  virtual ~AlphaTrade_Running_presult() throw();
  bool* success;

  _AlphaTrade_Running_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class AlphaTrade_GetPID_args {
 public:

  AlphaTrade_GetPID_args(const AlphaTrade_GetPID_args&);
  AlphaTrade_GetPID_args& operator=(const AlphaTrade_GetPID_args&);
  AlphaTrade_GetPID_args() {
  }

  virtual ~AlphaTrade_GetPID_args() throw();

  bool operator == (const AlphaTrade_GetPID_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AlphaTrade_GetPID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetPID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_GetPID_pargs {
 public:


  virtual ~AlphaTrade_GetPID_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetPID_result__isset {
  _AlphaTrade_GetPID_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetPID_result__isset;

class AlphaTrade_GetPID_result {
 public:

  AlphaTrade_GetPID_result(const AlphaTrade_GetPID_result&);
  AlphaTrade_GetPID_result& operator=(const AlphaTrade_GetPID_result&);
  AlphaTrade_GetPID_result() : success(0) {
  }

  virtual ~AlphaTrade_GetPID_result() throw();
  int32_t success;

  _AlphaTrade_GetPID_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const AlphaTrade_GetPID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetPID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetPID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetPID_presult__isset {
  _AlphaTrade_GetPID_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetPID_presult__isset;

class AlphaTrade_GetPID_presult {
 public:


  virtual ~AlphaTrade_GetPID_presult() throw();
  int32_t* success;

  _AlphaTrade_GetPID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_KeepAlive_args__isset {
  _AlphaTrade_KeepAlive_args__isset() : sessionID(false) {}
  bool sessionID :1;
} _AlphaTrade_KeepAlive_args__isset;

class AlphaTrade_KeepAlive_args {
 public:

  AlphaTrade_KeepAlive_args(const AlphaTrade_KeepAlive_args&);
  AlphaTrade_KeepAlive_args& operator=(const AlphaTrade_KeepAlive_args&);
  AlphaTrade_KeepAlive_args() : sessionID() {
  }

  virtual ~AlphaTrade_KeepAlive_args() throw();
  std::string sessionID;

  _AlphaTrade_KeepAlive_args__isset __isset;

  void __set_sessionID(const std::string& val);

  bool operator == (const AlphaTrade_KeepAlive_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_KeepAlive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_KeepAlive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_KeepAlive_pargs {
 public:


  virtual ~AlphaTrade_KeepAlive_pargs() throw();
  const std::string* sessionID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_KeepAlive_result {
 public:

  AlphaTrade_KeepAlive_result(const AlphaTrade_KeepAlive_result&);
  AlphaTrade_KeepAlive_result& operator=(const AlphaTrade_KeepAlive_result&);
  AlphaTrade_KeepAlive_result() {
  }

  virtual ~AlphaTrade_KeepAlive_result() throw();

  bool operator == (const AlphaTrade_KeepAlive_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AlphaTrade_KeepAlive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_KeepAlive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_KeepAlive_presult {
 public:


  virtual ~AlphaTrade_KeepAlive_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_LiveTradeLogin_args__isset {
  _AlphaTrade_LiveTradeLogin_args__isset() : sessionID(false), account(false), password1(false), password2(false), brokerStr(false) {}
  bool sessionID :1;
  bool account :1;
  bool password1 :1;
  bool password2 :1;
  bool brokerStr :1;
} _AlphaTrade_LiveTradeLogin_args__isset;

class AlphaTrade_LiveTradeLogin_args {
 public:

  AlphaTrade_LiveTradeLogin_args(const AlphaTrade_LiveTradeLogin_args&);
  AlphaTrade_LiveTradeLogin_args& operator=(const AlphaTrade_LiveTradeLogin_args&);
  AlphaTrade_LiveTradeLogin_args() : sessionID(), account(), password1(), password2(), brokerStr() {
  }

  virtual ~AlphaTrade_LiveTradeLogin_args() throw();
  std::string sessionID;
  std::string account;
  std::string password1;
  std::string password2;
  std::string brokerStr;

  _AlphaTrade_LiveTradeLogin_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_account(const std::string& val);

  void __set_password1(const std::string& val);

  void __set_password2(const std::string& val);

  void __set_brokerStr(const std::string& val);

  bool operator == (const AlphaTrade_LiveTradeLogin_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(account == rhs.account))
      return false;
    if (!(password1 == rhs.password1))
      return false;
    if (!(password2 == rhs.password2))
      return false;
    if (!(brokerStr == rhs.brokerStr))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeLogin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeLogin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_LiveTradeLogin_pargs {
 public:


  virtual ~AlphaTrade_LiveTradeLogin_pargs() throw();
  const std::string* sessionID;
  const std::string* account;
  const std::string* password1;
  const std::string* password2;
  const std::string* brokerStr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeLogin_result__isset {
  _AlphaTrade_LiveTradeLogin_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeLogin_result__isset;

class AlphaTrade_LiveTradeLogin_result {
 public:

  AlphaTrade_LiveTradeLogin_result(const AlphaTrade_LiveTradeLogin_result&);
  AlphaTrade_LiveTradeLogin_result& operator=(const AlphaTrade_LiveTradeLogin_result&);
  AlphaTrade_LiveTradeLogin_result() {
  }

  virtual ~AlphaTrade_LiveTradeLogin_result() throw();
  LiveTradeLoginResp success;

  _AlphaTrade_LiveTradeLogin_result__isset __isset;

  void __set_success(const LiveTradeLoginResp& val);

  bool operator == (const AlphaTrade_LiveTradeLogin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeLogin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeLogin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeLogin_presult__isset {
  _AlphaTrade_LiveTradeLogin_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeLogin_presult__isset;

class AlphaTrade_LiveTradeLogin_presult {
 public:


  virtual ~AlphaTrade_LiveTradeLogin_presult() throw();
  LiveTradeLoginResp* success;

  _AlphaTrade_LiveTradeLogin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_LiveTradeLogout_args__isset {
  _AlphaTrade_LiveTradeLogout_args__isset() : sessionID(false), liveTradeID(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
} _AlphaTrade_LiveTradeLogout_args__isset;

class AlphaTrade_LiveTradeLogout_args {
 public:

  AlphaTrade_LiveTradeLogout_args(const AlphaTrade_LiveTradeLogout_args&);
  AlphaTrade_LiveTradeLogout_args& operator=(const AlphaTrade_LiveTradeLogout_args&);
  AlphaTrade_LiveTradeLogout_args() : sessionID(), liveTradeID() {
  }

  virtual ~AlphaTrade_LiveTradeLogout_args() throw();
  std::string sessionID;
  std::string liveTradeID;

  _AlphaTrade_LiveTradeLogout_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  bool operator == (const AlphaTrade_LiveTradeLogout_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeLogout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeLogout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_LiveTradeLogout_pargs {
 public:


  virtual ~AlphaTrade_LiveTradeLogout_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeLogout_result__isset {
  _AlphaTrade_LiveTradeLogout_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeLogout_result__isset;

class AlphaTrade_LiveTradeLogout_result {
 public:

  AlphaTrade_LiveTradeLogout_result(const AlphaTrade_LiveTradeLogout_result&);
  AlphaTrade_LiveTradeLogout_result& operator=(const AlphaTrade_LiveTradeLogout_result&);
  AlphaTrade_LiveTradeLogout_result() {
  }

  virtual ~AlphaTrade_LiveTradeLogout_result() throw();
  LiveTradeLogoutResp success;

  _AlphaTrade_LiveTradeLogout_result__isset __isset;

  void __set_success(const LiveTradeLogoutResp& val);

  bool operator == (const AlphaTrade_LiveTradeLogout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeLogout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeLogout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeLogout_presult__isset {
  _AlphaTrade_LiveTradeLogout_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeLogout_presult__isset;

class AlphaTrade_LiveTradeLogout_presult {
 public:


  virtual ~AlphaTrade_LiveTradeLogout_presult() throw();
  LiveTradeLogoutResp* success;

  _AlphaTrade_LiveTradeLogout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_GetAccountState_args__isset {
  _AlphaTrade_GetAccountState_args__isset() : sessionID(false), liveTradeID(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
} _AlphaTrade_GetAccountState_args__isset;

class AlphaTrade_GetAccountState_args {
 public:

  AlphaTrade_GetAccountState_args(const AlphaTrade_GetAccountState_args&);
  AlphaTrade_GetAccountState_args& operator=(const AlphaTrade_GetAccountState_args&);
  AlphaTrade_GetAccountState_args() : sessionID(), liveTradeID() {
  }

  virtual ~AlphaTrade_GetAccountState_args() throw();
  std::string sessionID;
  std::string liveTradeID;

  _AlphaTrade_GetAccountState_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  bool operator == (const AlphaTrade_GetAccountState_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetAccountState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetAccountState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_GetAccountState_pargs {
 public:


  virtual ~AlphaTrade_GetAccountState_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetAccountState_result__isset {
  _AlphaTrade_GetAccountState_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetAccountState_result__isset;

class AlphaTrade_GetAccountState_result {
 public:

  AlphaTrade_GetAccountState_result(const AlphaTrade_GetAccountState_result&);
  AlphaTrade_GetAccountState_result& operator=(const AlphaTrade_GetAccountState_result&);
  AlphaTrade_GetAccountState_result() {
  }

  virtual ~AlphaTrade_GetAccountState_result() throw();
  GetAccountStateResp success;

  _AlphaTrade_GetAccountState_result__isset __isset;

  void __set_success(const GetAccountStateResp& val);

  bool operator == (const AlphaTrade_GetAccountState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetAccountState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetAccountState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetAccountState_presult__isset {
  _AlphaTrade_GetAccountState_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetAccountState_presult__isset;

class AlphaTrade_GetAccountState_presult {
 public:


  virtual ~AlphaTrade_GetAccountState_presult() throw();
  GetAccountStateResp* success;

  _AlphaTrade_GetAccountState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_GetAccountBalance_args__isset {
  _AlphaTrade_GetAccountBalance_args__isset() : sessionID(false), liveTradeID(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
} _AlphaTrade_GetAccountBalance_args__isset;

class AlphaTrade_GetAccountBalance_args {
 public:

  AlphaTrade_GetAccountBalance_args(const AlphaTrade_GetAccountBalance_args&);
  AlphaTrade_GetAccountBalance_args& operator=(const AlphaTrade_GetAccountBalance_args&);
  AlphaTrade_GetAccountBalance_args() : sessionID(), liveTradeID() {
  }

  virtual ~AlphaTrade_GetAccountBalance_args() throw();
  std::string sessionID;
  std::string liveTradeID;

  _AlphaTrade_GetAccountBalance_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  bool operator == (const AlphaTrade_GetAccountBalance_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetAccountBalance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetAccountBalance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_GetAccountBalance_pargs {
 public:


  virtual ~AlphaTrade_GetAccountBalance_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetAccountBalance_result__isset {
  _AlphaTrade_GetAccountBalance_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetAccountBalance_result__isset;

class AlphaTrade_GetAccountBalance_result {
 public:

  AlphaTrade_GetAccountBalance_result(const AlphaTrade_GetAccountBalance_result&);
  AlphaTrade_GetAccountBalance_result& operator=(const AlphaTrade_GetAccountBalance_result&);
  AlphaTrade_GetAccountBalance_result() {
  }

  virtual ~AlphaTrade_GetAccountBalance_result() throw();
  GetAccountBalanceResp success;

  _AlphaTrade_GetAccountBalance_result__isset __isset;

  void __set_success(const GetAccountBalanceResp& val);

  bool operator == (const AlphaTrade_GetAccountBalance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetAccountBalance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetAccountBalance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetAccountBalance_presult__isset {
  _AlphaTrade_GetAccountBalance_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetAccountBalance_presult__isset;

class AlphaTrade_GetAccountBalance_presult {
 public:


  virtual ~AlphaTrade_GetAccountBalance_presult() throw();
  GetAccountBalanceResp* success;

  _AlphaTrade_GetAccountBalance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_GetHoldingStock_args__isset {
  _AlphaTrade_GetHoldingStock_args__isset() : sessionID(false), liveTradeID(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
} _AlphaTrade_GetHoldingStock_args__isset;

class AlphaTrade_GetHoldingStock_args {
 public:

  AlphaTrade_GetHoldingStock_args(const AlphaTrade_GetHoldingStock_args&);
  AlphaTrade_GetHoldingStock_args& operator=(const AlphaTrade_GetHoldingStock_args&);
  AlphaTrade_GetHoldingStock_args() : sessionID(), liveTradeID() {
  }

  virtual ~AlphaTrade_GetHoldingStock_args() throw();
  std::string sessionID;
  std::string liveTradeID;

  _AlphaTrade_GetHoldingStock_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  bool operator == (const AlphaTrade_GetHoldingStock_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetHoldingStock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetHoldingStock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_GetHoldingStock_pargs {
 public:


  virtual ~AlphaTrade_GetHoldingStock_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetHoldingStock_result__isset {
  _AlphaTrade_GetHoldingStock_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetHoldingStock_result__isset;

class AlphaTrade_GetHoldingStock_result {
 public:

  AlphaTrade_GetHoldingStock_result(const AlphaTrade_GetHoldingStock_result&);
  AlphaTrade_GetHoldingStock_result& operator=(const AlphaTrade_GetHoldingStock_result&);
  AlphaTrade_GetHoldingStock_result() {
  }

  virtual ~AlphaTrade_GetHoldingStock_result() throw();
  GetHoldingStockResp success;

  _AlphaTrade_GetHoldingStock_result__isset __isset;

  void __set_success(const GetHoldingStockResp& val);

  bool operator == (const AlphaTrade_GetHoldingStock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetHoldingStock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetHoldingStock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetHoldingStock_presult__isset {
  _AlphaTrade_GetHoldingStock_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetHoldingStock_presult__isset;

class AlphaTrade_GetHoldingStock_presult {
 public:


  virtual ~AlphaTrade_GetHoldingStock_presult() throw();
  GetHoldingStockResp* success;

  _AlphaTrade_GetHoldingStock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_GetAllOrder_args__isset {
  _AlphaTrade_GetAllOrder_args__isset() : sessionID(false), liveTradeID(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
} _AlphaTrade_GetAllOrder_args__isset;

class AlphaTrade_GetAllOrder_args {
 public:

  AlphaTrade_GetAllOrder_args(const AlphaTrade_GetAllOrder_args&);
  AlphaTrade_GetAllOrder_args& operator=(const AlphaTrade_GetAllOrder_args&);
  AlphaTrade_GetAllOrder_args() : sessionID(), liveTradeID() {
  }

  virtual ~AlphaTrade_GetAllOrder_args() throw();
  std::string sessionID;
  std::string liveTradeID;

  _AlphaTrade_GetAllOrder_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  bool operator == (const AlphaTrade_GetAllOrder_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetAllOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetAllOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_GetAllOrder_pargs {
 public:


  virtual ~AlphaTrade_GetAllOrder_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetAllOrder_result__isset {
  _AlphaTrade_GetAllOrder_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetAllOrder_result__isset;

class AlphaTrade_GetAllOrder_result {
 public:

  AlphaTrade_GetAllOrder_result(const AlphaTrade_GetAllOrder_result&);
  AlphaTrade_GetAllOrder_result& operator=(const AlphaTrade_GetAllOrder_result&);
  AlphaTrade_GetAllOrder_result() {
  }

  virtual ~AlphaTrade_GetAllOrder_result() throw();
  GetAllOrderResp success;

  _AlphaTrade_GetAllOrder_result__isset __isset;

  void __set_success(const GetAllOrderResp& val);

  bool operator == (const AlphaTrade_GetAllOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetAllOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetAllOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetAllOrder_presult__isset {
  _AlphaTrade_GetAllOrder_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetAllOrder_presult__isset;

class AlphaTrade_GetAllOrder_presult {
 public:


  virtual ~AlphaTrade_GetAllOrder_presult() throw();
  GetAllOrderResp* success;

  _AlphaTrade_GetAllOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_GetOrderState_args__isset {
  _AlphaTrade_GetOrderState_args__isset() : sessionID(false), liveTradeID(false), orderID(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
  bool orderID :1;
} _AlphaTrade_GetOrderState_args__isset;

class AlphaTrade_GetOrderState_args {
 public:

  AlphaTrade_GetOrderState_args(const AlphaTrade_GetOrderState_args&);
  AlphaTrade_GetOrderState_args& operator=(const AlphaTrade_GetOrderState_args&);
  AlphaTrade_GetOrderState_args() : sessionID(), liveTradeID(), orderID() {
  }

  virtual ~AlphaTrade_GetOrderState_args() throw();
  std::string sessionID;
  std::string liveTradeID;
  std::string orderID;

  _AlphaTrade_GetOrderState_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  void __set_orderID(const std::string& val);

  bool operator == (const AlphaTrade_GetOrderState_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    if (!(orderID == rhs.orderID))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetOrderState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetOrderState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_GetOrderState_pargs {
 public:


  virtual ~AlphaTrade_GetOrderState_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;
  const std::string* orderID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetOrderState_result__isset {
  _AlphaTrade_GetOrderState_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetOrderState_result__isset;

class AlphaTrade_GetOrderState_result {
 public:

  AlphaTrade_GetOrderState_result(const AlphaTrade_GetOrderState_result&);
  AlphaTrade_GetOrderState_result& operator=(const AlphaTrade_GetOrderState_result&);
  AlphaTrade_GetOrderState_result() {
  }

  virtual ~AlphaTrade_GetOrderState_result() throw();
  GetOrderStateResp success;

  _AlphaTrade_GetOrderState_result__isset __isset;

  void __set_success(const GetOrderStateResp& val);

  bool operator == (const AlphaTrade_GetOrderState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_GetOrderState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_GetOrderState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_GetOrderState_presult__isset {
  _AlphaTrade_GetOrderState_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_GetOrderState_presult__isset;

class AlphaTrade_GetOrderState_presult {
 public:


  virtual ~AlphaTrade_GetOrderState_presult() throw();
  GetOrderStateResp* success;

  _AlphaTrade_GetOrderState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_CancelOrder_args__isset {
  _AlphaTrade_CancelOrder_args__isset() : sessionID(false), liveTradeID(false), orderID(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
  bool orderID :1;
} _AlphaTrade_CancelOrder_args__isset;

class AlphaTrade_CancelOrder_args {
 public:

  AlphaTrade_CancelOrder_args(const AlphaTrade_CancelOrder_args&);
  AlphaTrade_CancelOrder_args& operator=(const AlphaTrade_CancelOrder_args&);
  AlphaTrade_CancelOrder_args() : sessionID(), liveTradeID(), orderID() {
  }

  virtual ~AlphaTrade_CancelOrder_args() throw();
  std::string sessionID;
  std::string liveTradeID;
  std::string orderID;

  _AlphaTrade_CancelOrder_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  void __set_orderID(const std::string& val);

  bool operator == (const AlphaTrade_CancelOrder_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    if (!(orderID == rhs.orderID))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_CancelOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_CancelOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_CancelOrder_pargs {
 public:


  virtual ~AlphaTrade_CancelOrder_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;
  const std::string* orderID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_CancelOrder_result__isset {
  _AlphaTrade_CancelOrder_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_CancelOrder_result__isset;

class AlphaTrade_CancelOrder_result {
 public:

  AlphaTrade_CancelOrder_result(const AlphaTrade_CancelOrder_result&);
  AlphaTrade_CancelOrder_result& operator=(const AlphaTrade_CancelOrder_result&);
  AlphaTrade_CancelOrder_result() {
  }

  virtual ~AlphaTrade_CancelOrder_result() throw();
  CancelOrderResp success;

  _AlphaTrade_CancelOrder_result__isset __isset;

  void __set_success(const CancelOrderResp& val);

  bool operator == (const AlphaTrade_CancelOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_CancelOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_CancelOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_CancelOrder_presult__isset {
  _AlphaTrade_CancelOrder_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_CancelOrder_presult__isset;

class AlphaTrade_CancelOrder_presult {
 public:


  virtual ~AlphaTrade_CancelOrder_presult() throw();
  CancelOrderResp* success;

  _AlphaTrade_CancelOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_CloseOrder_args__isset {
  _AlphaTrade_CloseOrder_args__isset() : sessionID(false), liveTradeID(false), orderID(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
  bool orderID :1;
} _AlphaTrade_CloseOrder_args__isset;

class AlphaTrade_CloseOrder_args {
 public:

  AlphaTrade_CloseOrder_args(const AlphaTrade_CloseOrder_args&);
  AlphaTrade_CloseOrder_args& operator=(const AlphaTrade_CloseOrder_args&);
  AlphaTrade_CloseOrder_args() : sessionID(), liveTradeID(), orderID() {
  }

  virtual ~AlphaTrade_CloseOrder_args() throw();
  std::string sessionID;
  std::string liveTradeID;
  std::string orderID;

  _AlphaTrade_CloseOrder_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  void __set_orderID(const std::string& val);

  bool operator == (const AlphaTrade_CloseOrder_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    if (!(orderID == rhs.orderID))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_CloseOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_CloseOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_CloseOrder_pargs {
 public:


  virtual ~AlphaTrade_CloseOrder_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;
  const std::string* orderID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_CloseOrder_result__isset {
  _AlphaTrade_CloseOrder_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_CloseOrder_result__isset;

class AlphaTrade_CloseOrder_result {
 public:

  AlphaTrade_CloseOrder_result(const AlphaTrade_CloseOrder_result&);
  AlphaTrade_CloseOrder_result& operator=(const AlphaTrade_CloseOrder_result&);
  AlphaTrade_CloseOrder_result() {
  }

  virtual ~AlphaTrade_CloseOrder_result() throw();
  CloseOrderResp success;

  _AlphaTrade_CloseOrder_result__isset __isset;

  void __set_success(const CloseOrderResp& val);

  bool operator == (const AlphaTrade_CloseOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_CloseOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_CloseOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_CloseOrder_presult__isset {
  _AlphaTrade_CloseOrder_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_CloseOrder_presult__isset;

class AlphaTrade_CloseOrder_presult {
 public:


  virtual ~AlphaTrade_CloseOrder_presult() throw();
  CloseOrderResp* success;

  _AlphaTrade_CloseOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_LiveTradeBuyOpen_args__isset {
  _AlphaTrade_LiveTradeBuyOpen_args__isset() : sessionID(false), liveTradeID(false), sid(false), price(false), quant(false), orderType(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
  bool sid :1;
  bool price :1;
  bool quant :1;
  bool orderType :1;
} _AlphaTrade_LiveTradeBuyOpen_args__isset;

class AlphaTrade_LiveTradeBuyOpen_args {
 public:

  AlphaTrade_LiveTradeBuyOpen_args(const AlphaTrade_LiveTradeBuyOpen_args&);
  AlphaTrade_LiveTradeBuyOpen_args& operator=(const AlphaTrade_LiveTradeBuyOpen_args&);
  AlphaTrade_LiveTradeBuyOpen_args() : sessionID(), liveTradeID(), sid(), price(0), quant(0), orderType() {
  }

  virtual ~AlphaTrade_LiveTradeBuyOpen_args() throw();
  std::string sessionID;
  std::string liveTradeID;
  std::string sid;
  double price;
  double quant;
  std::string orderType;

  _AlphaTrade_LiveTradeBuyOpen_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  void __set_sid(const std::string& val);

  void __set_price(const double val);

  void __set_quant(const double val);

  void __set_orderType(const std::string& val);

  bool operator == (const AlphaTrade_LiveTradeBuyOpen_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    if (!(sid == rhs.sid))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(quant == rhs.quant))
      return false;
    if (!(orderType == rhs.orderType))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeBuyOpen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeBuyOpen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_LiveTradeBuyOpen_pargs {
 public:


  virtual ~AlphaTrade_LiveTradeBuyOpen_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;
  const std::string* sid;
  const double* price;
  const double* quant;
  const std::string* orderType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeBuyOpen_result__isset {
  _AlphaTrade_LiveTradeBuyOpen_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeBuyOpen_result__isset;

class AlphaTrade_LiveTradeBuyOpen_result {
 public:

  AlphaTrade_LiveTradeBuyOpen_result(const AlphaTrade_LiveTradeBuyOpen_result&);
  AlphaTrade_LiveTradeBuyOpen_result& operator=(const AlphaTrade_LiveTradeBuyOpen_result&);
  AlphaTrade_LiveTradeBuyOpen_result() {
  }

  virtual ~AlphaTrade_LiveTradeBuyOpen_result() throw();
  PlaceOrderResp success;

  _AlphaTrade_LiveTradeBuyOpen_result__isset __isset;

  void __set_success(const PlaceOrderResp& val);

  bool operator == (const AlphaTrade_LiveTradeBuyOpen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeBuyOpen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeBuyOpen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeBuyOpen_presult__isset {
  _AlphaTrade_LiveTradeBuyOpen_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeBuyOpen_presult__isset;

class AlphaTrade_LiveTradeBuyOpen_presult {
 public:


  virtual ~AlphaTrade_LiveTradeBuyOpen_presult() throw();
  PlaceOrderResp* success;

  _AlphaTrade_LiveTradeBuyOpen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_LiveTradeBuyClose_args__isset {
  _AlphaTrade_LiveTradeBuyClose_args__isset() : sessionID(false), liveTradeID(false), sid(false), price(false), quant(false), orderType(false), closeToday(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
  bool sid :1;
  bool price :1;
  bool quant :1;
  bool orderType :1;
  bool closeToday :1;
} _AlphaTrade_LiveTradeBuyClose_args__isset;

class AlphaTrade_LiveTradeBuyClose_args {
 public:

  AlphaTrade_LiveTradeBuyClose_args(const AlphaTrade_LiveTradeBuyClose_args&);
  AlphaTrade_LiveTradeBuyClose_args& operator=(const AlphaTrade_LiveTradeBuyClose_args&);
  AlphaTrade_LiveTradeBuyClose_args() : sessionID(), liveTradeID(), sid(), price(0), quant(0), orderType(), closeToday(0) {
  }

  virtual ~AlphaTrade_LiveTradeBuyClose_args() throw();
  std::string sessionID;
  std::string liveTradeID;
  std::string sid;
  double price;
  double quant;
  std::string orderType;
  bool closeToday;

  _AlphaTrade_LiveTradeBuyClose_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  void __set_sid(const std::string& val);

  void __set_price(const double val);

  void __set_quant(const double val);

  void __set_orderType(const std::string& val);

  void __set_closeToday(const bool val);

  bool operator == (const AlphaTrade_LiveTradeBuyClose_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    if (!(sid == rhs.sid))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(quant == rhs.quant))
      return false;
    if (!(orderType == rhs.orderType))
      return false;
    if (!(closeToday == rhs.closeToday))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeBuyClose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeBuyClose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_LiveTradeBuyClose_pargs {
 public:


  virtual ~AlphaTrade_LiveTradeBuyClose_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;
  const std::string* sid;
  const double* price;
  const double* quant;
  const std::string* orderType;
  const bool* closeToday;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeBuyClose_result__isset {
  _AlphaTrade_LiveTradeBuyClose_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeBuyClose_result__isset;

class AlphaTrade_LiveTradeBuyClose_result {
 public:

  AlphaTrade_LiveTradeBuyClose_result(const AlphaTrade_LiveTradeBuyClose_result&);
  AlphaTrade_LiveTradeBuyClose_result& operator=(const AlphaTrade_LiveTradeBuyClose_result&);
  AlphaTrade_LiveTradeBuyClose_result() {
  }

  virtual ~AlphaTrade_LiveTradeBuyClose_result() throw();
  PlaceOrderResp success;

  _AlphaTrade_LiveTradeBuyClose_result__isset __isset;

  void __set_success(const PlaceOrderResp& val);

  bool operator == (const AlphaTrade_LiveTradeBuyClose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeBuyClose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeBuyClose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeBuyClose_presult__isset {
  _AlphaTrade_LiveTradeBuyClose_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeBuyClose_presult__isset;

class AlphaTrade_LiveTradeBuyClose_presult {
 public:


  virtual ~AlphaTrade_LiveTradeBuyClose_presult() throw();
  PlaceOrderResp* success;

  _AlphaTrade_LiveTradeBuyClose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_LiveTradeSellClose_args__isset {
  _AlphaTrade_LiveTradeSellClose_args__isset() : sessionID(false), liveTradeID(false), sid(false), price(false), quant(false), orderType(false), closeToday(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
  bool sid :1;
  bool price :1;
  bool quant :1;
  bool orderType :1;
  bool closeToday :1;
} _AlphaTrade_LiveTradeSellClose_args__isset;

class AlphaTrade_LiveTradeSellClose_args {
 public:

  AlphaTrade_LiveTradeSellClose_args(const AlphaTrade_LiveTradeSellClose_args&);
  AlphaTrade_LiveTradeSellClose_args& operator=(const AlphaTrade_LiveTradeSellClose_args&);
  AlphaTrade_LiveTradeSellClose_args() : sessionID(), liveTradeID(), sid(), price(0), quant(0), orderType(), closeToday(0) {
  }

  virtual ~AlphaTrade_LiveTradeSellClose_args() throw();
  std::string sessionID;
  std::string liveTradeID;
  std::string sid;
  double price;
  double quant;
  std::string orderType;
  bool closeToday;

  _AlphaTrade_LiveTradeSellClose_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  void __set_sid(const std::string& val);

  void __set_price(const double val);

  void __set_quant(const double val);

  void __set_orderType(const std::string& val);

  void __set_closeToday(const bool val);

  bool operator == (const AlphaTrade_LiveTradeSellClose_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    if (!(sid == rhs.sid))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(quant == rhs.quant))
      return false;
    if (!(orderType == rhs.orderType))
      return false;
    if (!(closeToday == rhs.closeToday))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeSellClose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeSellClose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_LiveTradeSellClose_pargs {
 public:


  virtual ~AlphaTrade_LiveTradeSellClose_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;
  const std::string* sid;
  const double* price;
  const double* quant;
  const std::string* orderType;
  const bool* closeToday;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeSellClose_result__isset {
  _AlphaTrade_LiveTradeSellClose_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeSellClose_result__isset;

class AlphaTrade_LiveTradeSellClose_result {
 public:

  AlphaTrade_LiveTradeSellClose_result(const AlphaTrade_LiveTradeSellClose_result&);
  AlphaTrade_LiveTradeSellClose_result& operator=(const AlphaTrade_LiveTradeSellClose_result&);
  AlphaTrade_LiveTradeSellClose_result() {
  }

  virtual ~AlphaTrade_LiveTradeSellClose_result() throw();
  PlaceOrderResp success;

  _AlphaTrade_LiveTradeSellClose_result__isset __isset;

  void __set_success(const PlaceOrderResp& val);

  bool operator == (const AlphaTrade_LiveTradeSellClose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeSellClose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeSellClose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeSellClose_presult__isset {
  _AlphaTrade_LiveTradeSellClose_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeSellClose_presult__isset;

class AlphaTrade_LiveTradeSellClose_presult {
 public:


  virtual ~AlphaTrade_LiveTradeSellClose_presult() throw();
  PlaceOrderResp* success;

  _AlphaTrade_LiveTradeSellClose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaTrade_LiveTradeSellOpen_args__isset {
  _AlphaTrade_LiveTradeSellOpen_args__isset() : sessionID(false), liveTradeID(false), sid(false), price(false), quant(false), orderType(false) {}
  bool sessionID :1;
  bool liveTradeID :1;
  bool sid :1;
  bool price :1;
  bool quant :1;
  bool orderType :1;
} _AlphaTrade_LiveTradeSellOpen_args__isset;

class AlphaTrade_LiveTradeSellOpen_args {
 public:

  AlphaTrade_LiveTradeSellOpen_args(const AlphaTrade_LiveTradeSellOpen_args&);
  AlphaTrade_LiveTradeSellOpen_args& operator=(const AlphaTrade_LiveTradeSellOpen_args&);
  AlphaTrade_LiveTradeSellOpen_args() : sessionID(), liveTradeID(), sid(), price(0), quant(0), orderType() {
  }

  virtual ~AlphaTrade_LiveTradeSellOpen_args() throw();
  std::string sessionID;
  std::string liveTradeID;
  std::string sid;
  double price;
  double quant;
  std::string orderType;

  _AlphaTrade_LiveTradeSellOpen_args__isset __isset;

  void __set_sessionID(const std::string& val);

  void __set_liveTradeID(const std::string& val);

  void __set_sid(const std::string& val);

  void __set_price(const double val);

  void __set_quant(const double val);

  void __set_orderType(const std::string& val);

  bool operator == (const AlphaTrade_LiveTradeSellOpen_args & rhs) const
  {
    if (!(sessionID == rhs.sessionID))
      return false;
    if (!(liveTradeID == rhs.liveTradeID))
      return false;
    if (!(sid == rhs.sid))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(quant == rhs.quant))
      return false;
    if (!(orderType == rhs.orderType))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeSellOpen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeSellOpen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaTrade_LiveTradeSellOpen_pargs {
 public:


  virtual ~AlphaTrade_LiveTradeSellOpen_pargs() throw();
  const std::string* sessionID;
  const std::string* liveTradeID;
  const std::string* sid;
  const double* price;
  const double* quant;
  const std::string* orderType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeSellOpen_result__isset {
  _AlphaTrade_LiveTradeSellOpen_result__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeSellOpen_result__isset;

class AlphaTrade_LiveTradeSellOpen_result {
 public:

  AlphaTrade_LiveTradeSellOpen_result(const AlphaTrade_LiveTradeSellOpen_result&);
  AlphaTrade_LiveTradeSellOpen_result& operator=(const AlphaTrade_LiveTradeSellOpen_result&);
  AlphaTrade_LiveTradeSellOpen_result() {
  }

  virtual ~AlphaTrade_LiveTradeSellOpen_result() throw();
  PlaceOrderResp success;

  _AlphaTrade_LiveTradeSellOpen_result__isset __isset;

  void __set_success(const PlaceOrderResp& val);

  bool operator == (const AlphaTrade_LiveTradeSellOpen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaTrade_LiveTradeSellOpen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaTrade_LiveTradeSellOpen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaTrade_LiveTradeSellOpen_presult__isset {
  _AlphaTrade_LiveTradeSellOpen_presult__isset() : success(false) {}
  bool success :1;
} _AlphaTrade_LiveTradeSellOpen_presult__isset;

class AlphaTrade_LiveTradeSellOpen_presult {
 public:


  virtual ~AlphaTrade_LiveTradeSellOpen_presult() throw();
  PlaceOrderResp* success;

  _AlphaTrade_LiveTradeSellOpen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AlphaTradeClient : virtual public AlphaTradeIf {
 public:
  AlphaTradeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AlphaTradeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool Running();
  void send_Running();
  bool recv_Running();
  int32_t GetPID();
  void send_GetPID();
  int32_t recv_GetPID();
  void KeepAlive(const std::string& sessionID);
  void send_KeepAlive(const std::string& sessionID);
  void recv_KeepAlive();
  void LiveTradeLogin(LiveTradeLoginResp& _return, const std::string& sessionID, const std::string& account, const std::string& password1, const std::string& password2, const std::string& brokerStr);
  void send_LiveTradeLogin(const std::string& sessionID, const std::string& account, const std::string& password1, const std::string& password2, const std::string& brokerStr);
  void recv_LiveTradeLogin(LiveTradeLoginResp& _return);
  void LiveTradeLogout(LiveTradeLogoutResp& _return, const std::string& sessionID, const std::string& liveTradeID);
  void send_LiveTradeLogout(const std::string& sessionID, const std::string& liveTradeID);
  void recv_LiveTradeLogout(LiveTradeLogoutResp& _return);
  void GetAccountState(GetAccountStateResp& _return, const std::string& sessionID, const std::string& liveTradeID);
  void send_GetAccountState(const std::string& sessionID, const std::string& liveTradeID);
  void recv_GetAccountState(GetAccountStateResp& _return);
  void GetAccountBalance(GetAccountBalanceResp& _return, const std::string& sessionID, const std::string& liveTradeID);
  void send_GetAccountBalance(const std::string& sessionID, const std::string& liveTradeID);
  void recv_GetAccountBalance(GetAccountBalanceResp& _return);
  void GetHoldingStock(GetHoldingStockResp& _return, const std::string& sessionID, const std::string& liveTradeID);
  void send_GetHoldingStock(const std::string& sessionID, const std::string& liveTradeID);
  void recv_GetHoldingStock(GetHoldingStockResp& _return);
  void GetAllOrder(GetAllOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID);
  void send_GetAllOrder(const std::string& sessionID, const std::string& liveTradeID);
  void recv_GetAllOrder(GetAllOrderResp& _return);
  void GetOrderState(GetOrderStateResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  void send_GetOrderState(const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  void recv_GetOrderState(GetOrderStateResp& _return);
  void CancelOrder(CancelOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  void send_CancelOrder(const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  void recv_CancelOrder(CancelOrderResp& _return);
  void CloseOrder(CloseOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  void send_CloseOrder(const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  void recv_CloseOrder(CloseOrderResp& _return);
  void LiveTradeBuyOpen(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType);
  void send_LiveTradeBuyOpen(const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType);
  void recv_LiveTradeBuyOpen(PlaceOrderResp& _return);
  void LiveTradeBuyClose(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday);
  void send_LiveTradeBuyClose(const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday);
  void recv_LiveTradeBuyClose(PlaceOrderResp& _return);
  void LiveTradeSellClose(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday);
  void send_LiveTradeSellClose(const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday);
  void recv_LiveTradeSellClose(PlaceOrderResp& _return);
  void LiveTradeSellOpen(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType);
  void send_LiveTradeSellOpen(const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType);
  void recv_LiveTradeSellOpen(PlaceOrderResp& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AlphaTradeProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AlphaTradeIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AlphaTradeProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Running(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetPID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_KeepAlive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LiveTradeLogin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LiveTradeLogout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAccountBalance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetHoldingStock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetAllOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetOrderState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CancelOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CloseOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LiveTradeBuyOpen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LiveTradeBuyClose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LiveTradeSellClose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LiveTradeSellOpen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AlphaTradeProcessor(boost::shared_ptr<AlphaTradeIf> iface) :
    iface_(iface) {
    processMap_["Running"] = &AlphaTradeProcessor::process_Running;
    processMap_["GetPID"] = &AlphaTradeProcessor::process_GetPID;
    processMap_["KeepAlive"] = &AlphaTradeProcessor::process_KeepAlive;
    processMap_["LiveTradeLogin"] = &AlphaTradeProcessor::process_LiveTradeLogin;
    processMap_["LiveTradeLogout"] = &AlphaTradeProcessor::process_LiveTradeLogout;
    processMap_["GetAccountState"] = &AlphaTradeProcessor::process_GetAccountState;
    processMap_["GetAccountBalance"] = &AlphaTradeProcessor::process_GetAccountBalance;
    processMap_["GetHoldingStock"] = &AlphaTradeProcessor::process_GetHoldingStock;
    processMap_["GetAllOrder"] = &AlphaTradeProcessor::process_GetAllOrder;
    processMap_["GetOrderState"] = &AlphaTradeProcessor::process_GetOrderState;
    processMap_["CancelOrder"] = &AlphaTradeProcessor::process_CancelOrder;
    processMap_["CloseOrder"] = &AlphaTradeProcessor::process_CloseOrder;
    processMap_["LiveTradeBuyOpen"] = &AlphaTradeProcessor::process_LiveTradeBuyOpen;
    processMap_["LiveTradeBuyClose"] = &AlphaTradeProcessor::process_LiveTradeBuyClose;
    processMap_["LiveTradeSellClose"] = &AlphaTradeProcessor::process_LiveTradeSellClose;
    processMap_["LiveTradeSellOpen"] = &AlphaTradeProcessor::process_LiveTradeSellOpen;
  }

  virtual ~AlphaTradeProcessor() {}
};

class AlphaTradeProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AlphaTradeProcessorFactory(const ::boost::shared_ptr< AlphaTradeIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AlphaTradeIfFactory > handlerFactory_;
};

class AlphaTradeMultiface : virtual public AlphaTradeIf {
 public:
  AlphaTradeMultiface(std::vector<boost::shared_ptr<AlphaTradeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AlphaTradeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AlphaTradeIf> > ifaces_;
  AlphaTradeMultiface() {}
  void add(boost::shared_ptr<AlphaTradeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool Running() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Running();
    }
    return ifaces_[i]->Running();
  }

  int32_t GetPID() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetPID();
    }
    return ifaces_[i]->GetPID();
  }

  void KeepAlive(const std::string& sessionID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->KeepAlive(sessionID);
    }
    ifaces_[i]->KeepAlive(sessionID);
  }

  void LiveTradeLogin(LiveTradeLoginResp& _return, const std::string& sessionID, const std::string& account, const std::string& password1, const std::string& password2, const std::string& brokerStr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LiveTradeLogin(_return, sessionID, account, password1, password2, brokerStr);
    }
    ifaces_[i]->LiveTradeLogin(_return, sessionID, account, password1, password2, brokerStr);
    return;
  }

  void LiveTradeLogout(LiveTradeLogoutResp& _return, const std::string& sessionID, const std::string& liveTradeID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LiveTradeLogout(_return, sessionID, liveTradeID);
    }
    ifaces_[i]->LiveTradeLogout(_return, sessionID, liveTradeID);
    return;
  }

  void GetAccountState(GetAccountStateResp& _return, const std::string& sessionID, const std::string& liveTradeID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountState(_return, sessionID, liveTradeID);
    }
    ifaces_[i]->GetAccountState(_return, sessionID, liveTradeID);
    return;
  }

  void GetAccountBalance(GetAccountBalanceResp& _return, const std::string& sessionID, const std::string& liveTradeID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAccountBalance(_return, sessionID, liveTradeID);
    }
    ifaces_[i]->GetAccountBalance(_return, sessionID, liveTradeID);
    return;
  }

  void GetHoldingStock(GetHoldingStockResp& _return, const std::string& sessionID, const std::string& liveTradeID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetHoldingStock(_return, sessionID, liveTradeID);
    }
    ifaces_[i]->GetHoldingStock(_return, sessionID, liveTradeID);
    return;
  }

  void GetAllOrder(GetAllOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetAllOrder(_return, sessionID, liveTradeID);
    }
    ifaces_[i]->GetAllOrder(_return, sessionID, liveTradeID);
    return;
  }

  void GetOrderState(GetOrderStateResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetOrderState(_return, sessionID, liveTradeID, orderID);
    }
    ifaces_[i]->GetOrderState(_return, sessionID, liveTradeID, orderID);
    return;
  }

  void CancelOrder(CancelOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CancelOrder(_return, sessionID, liveTradeID, orderID);
    }
    ifaces_[i]->CancelOrder(_return, sessionID, liveTradeID, orderID);
    return;
  }

  void CloseOrder(CloseOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CloseOrder(_return, sessionID, liveTradeID, orderID);
    }
    ifaces_[i]->CloseOrder(_return, sessionID, liveTradeID, orderID);
    return;
  }

  void LiveTradeBuyOpen(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LiveTradeBuyOpen(_return, sessionID, liveTradeID, sid, price, quant, orderType);
    }
    ifaces_[i]->LiveTradeBuyOpen(_return, sessionID, liveTradeID, sid, price, quant, orderType);
    return;
  }

  void LiveTradeBuyClose(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LiveTradeBuyClose(_return, sessionID, liveTradeID, sid, price, quant, orderType, closeToday);
    }
    ifaces_[i]->LiveTradeBuyClose(_return, sessionID, liveTradeID, sid, price, quant, orderType, closeToday);
    return;
  }

  void LiveTradeSellClose(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LiveTradeSellClose(_return, sessionID, liveTradeID, sid, price, quant, orderType, closeToday);
    }
    ifaces_[i]->LiveTradeSellClose(_return, sessionID, liveTradeID, sid, price, quant, orderType, closeToday);
    return;
  }

  void LiveTradeSellOpen(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LiveTradeSellOpen(_return, sessionID, liveTradeID, sid, price, quant, orderType);
    }
    ifaces_[i]->LiveTradeSellOpen(_return, sessionID, liveTradeID, sid, price, quant, orderType);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AlphaTradeConcurrentClient : virtual public AlphaTradeIf {
 public:
  AlphaTradeConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AlphaTradeConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool Running();
  int32_t send_Running();
  bool recv_Running(const int32_t seqid);
  int32_t GetPID();
  int32_t send_GetPID();
  int32_t recv_GetPID(const int32_t seqid);
  void KeepAlive(const std::string& sessionID);
  int32_t send_KeepAlive(const std::string& sessionID);
  void recv_KeepAlive(const int32_t seqid);
  void LiveTradeLogin(LiveTradeLoginResp& _return, const std::string& sessionID, const std::string& account, const std::string& password1, const std::string& password2, const std::string& brokerStr);
  int32_t send_LiveTradeLogin(const std::string& sessionID, const std::string& account, const std::string& password1, const std::string& password2, const std::string& brokerStr);
  void recv_LiveTradeLogin(LiveTradeLoginResp& _return, const int32_t seqid);
  void LiveTradeLogout(LiveTradeLogoutResp& _return, const std::string& sessionID, const std::string& liveTradeID);
  int32_t send_LiveTradeLogout(const std::string& sessionID, const std::string& liveTradeID);
  void recv_LiveTradeLogout(LiveTradeLogoutResp& _return, const int32_t seqid);
  void GetAccountState(GetAccountStateResp& _return, const std::string& sessionID, const std::string& liveTradeID);
  int32_t send_GetAccountState(const std::string& sessionID, const std::string& liveTradeID);
  void recv_GetAccountState(GetAccountStateResp& _return, const int32_t seqid);
  void GetAccountBalance(GetAccountBalanceResp& _return, const std::string& sessionID, const std::string& liveTradeID);
  int32_t send_GetAccountBalance(const std::string& sessionID, const std::string& liveTradeID);
  void recv_GetAccountBalance(GetAccountBalanceResp& _return, const int32_t seqid);
  void GetHoldingStock(GetHoldingStockResp& _return, const std::string& sessionID, const std::string& liveTradeID);
  int32_t send_GetHoldingStock(const std::string& sessionID, const std::string& liveTradeID);
  void recv_GetHoldingStock(GetHoldingStockResp& _return, const int32_t seqid);
  void GetAllOrder(GetAllOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID);
  int32_t send_GetAllOrder(const std::string& sessionID, const std::string& liveTradeID);
  void recv_GetAllOrder(GetAllOrderResp& _return, const int32_t seqid);
  void GetOrderState(GetOrderStateResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  int32_t send_GetOrderState(const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  void recv_GetOrderState(GetOrderStateResp& _return, const int32_t seqid);
  void CancelOrder(CancelOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  int32_t send_CancelOrder(const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  void recv_CancelOrder(CancelOrderResp& _return, const int32_t seqid);
  void CloseOrder(CloseOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  int32_t send_CloseOrder(const std::string& sessionID, const std::string& liveTradeID, const std::string& orderID);
  void recv_CloseOrder(CloseOrderResp& _return, const int32_t seqid);
  void LiveTradeBuyOpen(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType);
  int32_t send_LiveTradeBuyOpen(const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType);
  void recv_LiveTradeBuyOpen(PlaceOrderResp& _return, const int32_t seqid);
  void LiveTradeBuyClose(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday);
  int32_t send_LiveTradeBuyClose(const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday);
  void recv_LiveTradeBuyClose(PlaceOrderResp& _return, const int32_t seqid);
  void LiveTradeSellClose(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday);
  int32_t send_LiveTradeSellClose(const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType, const bool closeToday);
  void recv_LiveTradeSellClose(PlaceOrderResp& _return, const int32_t seqid);
  void LiveTradeSellOpen(PlaceOrderResp& _return, const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType);
  int32_t send_LiveTradeSellOpen(const std::string& sessionID, const std::string& liveTradeID, const std::string& sid, const double price, const double quant, const std::string& orderType);
  void recv_LiveTradeSellOpen(PlaceOrderResp& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
