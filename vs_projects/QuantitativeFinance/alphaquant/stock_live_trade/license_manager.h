// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <time.h>
#include <map>
#include <string>

#include "GWin32CriticalSection.h"
#include "GScopedLock.h"
#include "GWin32Thread.h"

#include "alpha_config_types.h"

#include <boost/tuple/tuple.hpp>
#include <boost/shared_ptr.hpp>

class LicenseManager
{
public:
	static boost::shared_ptr<LicenseManager> get_instance();

	LicenseManager();

	bool license_ok(int32_t& code, std::string& msg);
	

	void set_session_id(const std::string& id);

	std::string get_session_id();
	std::vector<boost::tuple<std::string, uint16_t>> get_broker_server(const std::string &broker);

	void set_account_money(const std::string& account, double money);

	double get_money_left();

	void start();

private:
	static u_long WINAPI FetchConfigThreadProc(LPVOID lParam);

private:
	double m_max_allowed_fund;
	time_t m_expire_time;
	
	std::map<std::string, double> m_account_money_left_map;

	bool m_started;
	std::string m_session_id;
	Win32Thread m_thread;
	Win32CriticalSection m_critical_sec;
	
	std::map<std::string, std::string> m_license_data;
	std::map<std::string, std::vector<ServerItem>> m_broker_server;
};