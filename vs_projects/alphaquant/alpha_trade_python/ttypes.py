#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class HoldingStock(object):
    """
    Attributes:
     - stock_id
     - buy_price
     - long_short
     - quant
     - quant_sellable
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'stock_id', 'UTF8', None, ),  # 1
        (2, TType.DOUBLE, 'buy_price', None, None, ),  # 2
        (3, TType.STRING, 'long_short', 'UTF8', None, ),  # 3
        (4, TType.DOUBLE, 'quant', None, None, ),  # 4
        (5, TType.DOUBLE, 'quant_sellable', None, None, ),  # 5
    )

    def __init__(self, stock_id=None, buy_price=None, long_short=None, quant=None, quant_sellable=None,):
        self.stock_id = stock_id
        self.buy_price = buy_price
        self.long_short = long_short
        self.quant = quant
        self.quant_sellable = quant_sellable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stock_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.buy_price = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.long_short = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.quant = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.quant_sellable = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HoldingStock')
        if self.stock_id is not None:
            oprot.writeFieldBegin('stock_id', TType.STRING, 1)
            oprot.writeString(self.stock_id.encode('utf-8') if sys.version_info[0] == 2 else self.stock_id)
            oprot.writeFieldEnd()
        if self.buy_price is not None:
            oprot.writeFieldBegin('buy_price', TType.DOUBLE, 2)
            oprot.writeDouble(self.buy_price)
            oprot.writeFieldEnd()
        if self.long_short is not None:
            oprot.writeFieldBegin('long_short', TType.STRING, 3)
            oprot.writeString(self.long_short.encode('utf-8') if sys.version_info[0] == 2 else self.long_short)
            oprot.writeFieldEnd()
        if self.quant is not None:
            oprot.writeFieldBegin('quant', TType.DOUBLE, 4)
            oprot.writeDouble(self.quant)
            oprot.writeFieldEnd()
        if self.quant_sellable is not None:
            oprot.writeFieldBegin('quant_sellable', TType.DOUBLE, 5)
            oprot.writeDouble(self.quant_sellable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccountBalance(object):
    """
    Attributes:
     - total_value
     - money_left
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'total_value', None, None, ),  # 1
        (2, TType.DOUBLE, 'money_left', None, None, ),  # 2
    )

    def __init__(self, total_value=None, money_left=None,):
        self.total_value = total_value
        self.money_left = money_left

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.total_value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.money_left = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccountBalance')
        if self.total_value is not None:
            oprot.writeFieldBegin('total_value', TType.DOUBLE, 1)
            oprot.writeDouble(self.total_value)
            oprot.writeFieldEnd()
        if self.money_left is not None:
            oprot.writeFieldBegin('money_left', TType.DOUBLE, 2)
            oprot.writeDouble(self.money_left)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OrderState(object):
    """
    Attributes:
     - order_id
     - time
     - sid
     - internal_order_id
     - operation
     - direction
     - price
     - quant
     - deal_quant
     - deal_price
     - state
     - desc
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'order_id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'time', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'sid', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'internal_order_id', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'operation', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'direction', 'UTF8', None, ),  # 6
        (7, TType.DOUBLE, 'price', None, None, ),  # 7
        (8, TType.DOUBLE, 'quant', None, None, ),  # 8
        (9, TType.DOUBLE, 'deal_quant', None, None, ),  # 9
        (10, TType.DOUBLE, 'deal_price', None, None, ),  # 10
        (11, TType.STRING, 'state', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'desc', 'UTF8', None, ),  # 12
    )

    def __init__(self, order_id=None, time=None, sid=None, internal_order_id=None, operation=None, direction=None, price=None, quant=None, deal_quant=None, deal_price=None, state=None, desc=None,):
        self.order_id = order_id
        self.time = time
        self.sid = sid
        self.internal_order_id = internal_order_id
        self.operation = operation
        self.direction = direction
        self.price = price
        self.quant = quant
        self.deal_quant = deal_quant
        self.deal_price = deal_price
        self.state = state
        self.desc = desc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.order_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.internal_order_id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.operation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.direction = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.price = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.quant = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.deal_quant = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.deal_price = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('OrderState')
        if self.order_id is not None:
            oprot.writeFieldBegin('order_id', TType.STRING, 1)
            oprot.writeString(self.order_id.encode('utf-8') if sys.version_info[0] == 2 else self.order_id)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRING, 2)
            oprot.writeString(self.time.encode('utf-8') if sys.version_info[0] == 2 else self.time)
            oprot.writeFieldEnd()
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 3)
            oprot.writeString(self.sid.encode('utf-8') if sys.version_info[0] == 2 else self.sid)
            oprot.writeFieldEnd()
        if self.internal_order_id is not None:
            oprot.writeFieldBegin('internal_order_id', TType.STRING, 4)
            oprot.writeString(self.internal_order_id.encode('utf-8') if sys.version_info[0] == 2 else self.internal_order_id)
            oprot.writeFieldEnd()
        if self.operation is not None:
            oprot.writeFieldBegin('operation', TType.STRING, 5)
            oprot.writeString(self.operation.encode('utf-8') if sys.version_info[0] == 2 else self.operation)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.STRING, 6)
            oprot.writeString(self.direction.encode('utf-8') if sys.version_info[0] == 2 else self.direction)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.DOUBLE, 7)
            oprot.writeDouble(self.price)
            oprot.writeFieldEnd()
        if self.quant is not None:
            oprot.writeFieldBegin('quant', TType.DOUBLE, 8)
            oprot.writeDouble(self.quant)
            oprot.writeFieldEnd()
        if self.deal_quant is not None:
            oprot.writeFieldBegin('deal_quant', TType.DOUBLE, 9)
            oprot.writeDouble(self.deal_quant)
            oprot.writeFieldEnd()
        if self.deal_price is not None:
            oprot.writeFieldBegin('deal_price', TType.DOUBLE, 10)
            oprot.writeDouble(self.deal_price)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 11)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 12)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeLoginResp(object):
    """
    Attributes:
     - ret_code
     - result
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
        (2, TType.STRING, 'result', 'UTF8', None, ),  # 2
    )

    def __init__(self, ret_code=None, result=None,):
        self.ret_code = ret_code
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.result = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeLoginResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRING, 2)
            oprot.writeString(self.result.encode('utf-8') if sys.version_info[0] == 2 else self.result)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeLogoutResp(object):
    """
    Attributes:
     - ret_code
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
    )

    def __init__(self, ret_code=None,):
        self.ret_code = ret_code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeLogoutResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAccountStateResp(object):
    """
    Attributes:
     - ret_code
     - state
     - desc
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
        (2, TType.STRING, 'state', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'desc', 'UTF8', None, ),  # 3
    )

    def __init__(self, ret_code=None, state=None, desc=None,):
        self.ret_code = ret_code
        self.state = state
        self.desc = desc

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAccountStateResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 2)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        if self.desc is not None:
            oprot.writeFieldBegin('desc', TType.STRING, 3)
            oprot.writeString(self.desc.encode('utf-8') if sys.version_info[0] == 2 else self.desc)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAccountInfoResp(object):
    """
    Attributes:
     - ret_code
     - result
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
        (2, TType.STRING, 'result', 'UTF8', None, ),  # 2
    )

    def __init__(self, ret_code=None, result=None,):
        self.ret_code = ret_code
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.result = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAccountInfoResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRING, 2)
            oprot.writeString(self.result.encode('utf-8') if sys.version_info[0] == 2 else self.result)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAccountBalanceResp(object):
    """
    Attributes:
     - ret_code
     - result
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
        (2, TType.STRUCT, 'result', (AccountBalance, AccountBalance.thrift_spec), None, ),  # 2
    )

    def __init__(self, ret_code=None, result=None,):
        self.ret_code = ret_code
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.result = AccountBalance()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAccountBalanceResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 2)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetHoldingStockResp(object):
    """
    Attributes:
     - ret_code
     - result
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
        (2, TType.LIST, 'result', (TType.STRUCT, (HoldingStock, HoldingStock.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, ret_code=None, result=None,):
        self.ret_code = ret_code
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.result = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = HoldingStock()
                        _elem5.read(iprot)
                        self.result.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetHoldingStockResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.result))
            for iter6 in self.result:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAllOrderResp(object):
    """
    Attributes:
     - ret_code
     - result
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
        (2, TType.LIST, 'result', (TType.STRUCT, (OrderState, OrderState.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, ret_code=None, result=None,):
        self.ret_code = ret_code
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.result = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = OrderState()
                        _elem12.read(iprot)
                        self.result.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAllOrderResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.result))
            for iter13 in self.result:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetOrderStateResp(object):
    """
    Attributes:
     - ret_code
     - result
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
        (2, TType.STRUCT, 'result', (OrderState, OrderState.thrift_spec), None, ),  # 2
    )

    def __init__(self, ret_code=None, result=None,):
        self.ret_code = ret_code
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.result = OrderState()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetOrderStateResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 2)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CloseOrderResp(object):
    """
    Attributes:
     - ret_code
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
    )

    def __init__(self, ret_code=None,):
        self.ret_code = ret_code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CloseOrderResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CancelOrderResp(object):
    """
    Attributes:
     - ret_code
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
    )

    def __init__(self, ret_code=None,):
        self.ret_code = ret_code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CancelOrderResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PlaceOrderResp(object):
    """
    Attributes:
     - ret_code
     - result
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'ret_code', None, None, ),  # 1
        (2, TType.STRING, 'result', 'UTF8', None, ),  # 2
    )

    def __init__(self, ret_code=None, result=None,):
        self.ret_code = ret_code
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.result = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PlaceOrderResp')
        if self.ret_code is not None:
            oprot.writeFieldBegin('ret_code', TType.I32, 1)
            oprot.writeI32(self.ret_code)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRING, 2)
            oprot.writeString(self.result.encode('utf-8') if sys.version_info[0] == 2 else self.result)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
