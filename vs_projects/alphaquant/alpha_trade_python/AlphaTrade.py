#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def Running(self):
        pass

    def GetPID(self):
        pass

    def KeepAlive(self, sessionID):
        """
        Parameters:
         - sessionID
        """
        pass

    def LiveTradeLogin(self, sessionID, account, password1, password2, brokerStr):
        """
        Parameters:
         - sessionID
         - account
         - password1
         - password2
         - brokerStr
        """
        pass

    def LiveTradeLogout(self, sessionID, liveTradeID):
        """
        Parameters:
         - sessionID
         - liveTradeID
        """
        pass

    def GetAccountState(self, sessionID, liveTradeID):
        """
        Parameters:
         - sessionID
         - liveTradeID
        """
        pass

    def GetAccountBalance(self, sessionID, liveTradeID):
        """
        Parameters:
         - sessionID
         - liveTradeID
        """
        pass

    def GetHoldingStock(self, sessionID, liveTradeID):
        """
        Parameters:
         - sessionID
         - liveTradeID
        """
        pass

    def GetAllOrder(self, sessionID, liveTradeID):
        """
        Parameters:
         - sessionID
         - liveTradeID
        """
        pass

    def GetOrderState(self, sessionID, liveTradeID, orderID):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - orderID
        """
        pass

    def GetAccountInfo(self, sessionID, liveTradeID, key):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - key
        """
        pass

    def CancelOrder(self, sessionID, liveTradeID, orderID):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - orderID
        """
        pass

    def CloseOrder(self, sessionID, liveTradeID, orderID):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - orderID
        """
        pass

    def LiveTradeBuyOpen(self, sessionID, liveTradeID, sid, price, quant, orderType):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - sid
         - price
         - quant
         - orderType
        """
        pass

    def LiveTradeBuyClose(self, sessionID, liveTradeID, sid, price, quant, orderType, closeToday):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - sid
         - price
         - quant
         - orderType
         - closeToday
        """
        pass

    def LiveTradeSellClose(self, sessionID, liveTradeID, sid, price, quant, orderType, closeToday):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - sid
         - price
         - quant
         - orderType
         - closeToday
        """
        pass

    def LiveTradeSellOpen(self, sessionID, liveTradeID, sid, price, quant, orderType):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - sid
         - price
         - quant
         - orderType
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def Running(self):
        self.send_Running()
        return self.recv_Running()

    def send_Running(self):
        self._oprot.writeMessageBegin('Running', TMessageType.CALL, self._seqid)
        args = Running_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_Running(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = Running_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "Running failed: unknown result")

    def GetPID(self):
        self.send_GetPID()
        return self.recv_GetPID()

    def send_GetPID(self):
        self._oprot.writeMessageBegin('GetPID', TMessageType.CALL, self._seqid)
        args = GetPID_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetPID(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetPID_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetPID failed: unknown result")

    def KeepAlive(self, sessionID):
        """
        Parameters:
         - sessionID
        """
        self.send_KeepAlive(sessionID)
        self.recv_KeepAlive()

    def send_KeepAlive(self, sessionID):
        self._oprot.writeMessageBegin('KeepAlive', TMessageType.CALL, self._seqid)
        args = KeepAlive_args()
        args.sessionID = sessionID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_KeepAlive(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = KeepAlive_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def LiveTradeLogin(self, sessionID, account, password1, password2, brokerStr):
        """
        Parameters:
         - sessionID
         - account
         - password1
         - password2
         - brokerStr
        """
        self.send_LiveTradeLogin(sessionID, account, password1, password2, brokerStr)
        return self.recv_LiveTradeLogin()

    def send_LiveTradeLogin(self, sessionID, account, password1, password2, brokerStr):
        self._oprot.writeMessageBegin('LiveTradeLogin', TMessageType.CALL, self._seqid)
        args = LiveTradeLogin_args()
        args.sessionID = sessionID
        args.account = account
        args.password1 = password1
        args.password2 = password2
        args.brokerStr = brokerStr
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_LiveTradeLogin(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = LiveTradeLogin_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "LiveTradeLogin failed: unknown result")

    def LiveTradeLogout(self, sessionID, liveTradeID):
        """
        Parameters:
         - sessionID
         - liveTradeID
        """
        self.send_LiveTradeLogout(sessionID, liveTradeID)
        return self.recv_LiveTradeLogout()

    def send_LiveTradeLogout(self, sessionID, liveTradeID):
        self._oprot.writeMessageBegin('LiveTradeLogout', TMessageType.CALL, self._seqid)
        args = LiveTradeLogout_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_LiveTradeLogout(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = LiveTradeLogout_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "LiveTradeLogout failed: unknown result")

    def GetAccountState(self, sessionID, liveTradeID):
        """
        Parameters:
         - sessionID
         - liveTradeID
        """
        self.send_GetAccountState(sessionID, liveTradeID)
        return self.recv_GetAccountState()

    def send_GetAccountState(self, sessionID, liveTradeID):
        self._oprot.writeMessageBegin('GetAccountState', TMessageType.CALL, self._seqid)
        args = GetAccountState_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetAccountState(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetAccountState_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetAccountState failed: unknown result")

    def GetAccountBalance(self, sessionID, liveTradeID):
        """
        Parameters:
         - sessionID
         - liveTradeID
        """
        self.send_GetAccountBalance(sessionID, liveTradeID)
        return self.recv_GetAccountBalance()

    def send_GetAccountBalance(self, sessionID, liveTradeID):
        self._oprot.writeMessageBegin('GetAccountBalance', TMessageType.CALL, self._seqid)
        args = GetAccountBalance_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetAccountBalance(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetAccountBalance_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetAccountBalance failed: unknown result")

    def GetHoldingStock(self, sessionID, liveTradeID):
        """
        Parameters:
         - sessionID
         - liveTradeID
        """
        self.send_GetHoldingStock(sessionID, liveTradeID)
        return self.recv_GetHoldingStock()

    def send_GetHoldingStock(self, sessionID, liveTradeID):
        self._oprot.writeMessageBegin('GetHoldingStock', TMessageType.CALL, self._seqid)
        args = GetHoldingStock_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetHoldingStock(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetHoldingStock_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetHoldingStock failed: unknown result")

    def GetAllOrder(self, sessionID, liveTradeID):
        """
        Parameters:
         - sessionID
         - liveTradeID
        """
        self.send_GetAllOrder(sessionID, liveTradeID)
        return self.recv_GetAllOrder()

    def send_GetAllOrder(self, sessionID, liveTradeID):
        self._oprot.writeMessageBegin('GetAllOrder', TMessageType.CALL, self._seqid)
        args = GetAllOrder_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetAllOrder(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetAllOrder_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetAllOrder failed: unknown result")

    def GetOrderState(self, sessionID, liveTradeID, orderID):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - orderID
        """
        self.send_GetOrderState(sessionID, liveTradeID, orderID)
        return self.recv_GetOrderState()

    def send_GetOrderState(self, sessionID, liveTradeID, orderID):
        self._oprot.writeMessageBegin('GetOrderState', TMessageType.CALL, self._seqid)
        args = GetOrderState_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.orderID = orderID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetOrderState(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetOrderState_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetOrderState failed: unknown result")

    def GetAccountInfo(self, sessionID, liveTradeID, key):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - key
        """
        self.send_GetAccountInfo(sessionID, liveTradeID, key)
        return self.recv_GetAccountInfo()

    def send_GetAccountInfo(self, sessionID, liveTradeID, key):
        self._oprot.writeMessageBegin('GetAccountInfo', TMessageType.CALL, self._seqid)
        args = GetAccountInfo_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.key = key
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_GetAccountInfo(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = GetAccountInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "GetAccountInfo failed: unknown result")

    def CancelOrder(self, sessionID, liveTradeID, orderID):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - orderID
        """
        self.send_CancelOrder(sessionID, liveTradeID, orderID)
        return self.recv_CancelOrder()

    def send_CancelOrder(self, sessionID, liveTradeID, orderID):
        self._oprot.writeMessageBegin('CancelOrder', TMessageType.CALL, self._seqid)
        args = CancelOrder_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.orderID = orderID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_CancelOrder(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CancelOrder_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "CancelOrder failed: unknown result")

    def CloseOrder(self, sessionID, liveTradeID, orderID):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - orderID
        """
        self.send_CloseOrder(sessionID, liveTradeID, orderID)
        return self.recv_CloseOrder()

    def send_CloseOrder(self, sessionID, liveTradeID, orderID):
        self._oprot.writeMessageBegin('CloseOrder', TMessageType.CALL, self._seqid)
        args = CloseOrder_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.orderID = orderID
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_CloseOrder(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = CloseOrder_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "CloseOrder failed: unknown result")

    def LiveTradeBuyOpen(self, sessionID, liveTradeID, sid, price, quant, orderType):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - sid
         - price
         - quant
         - orderType
        """
        self.send_LiveTradeBuyOpen(sessionID, liveTradeID, sid, price, quant, orderType)
        return self.recv_LiveTradeBuyOpen()

    def send_LiveTradeBuyOpen(self, sessionID, liveTradeID, sid, price, quant, orderType):
        self._oprot.writeMessageBegin('LiveTradeBuyOpen', TMessageType.CALL, self._seqid)
        args = LiveTradeBuyOpen_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.sid = sid
        args.price = price
        args.quant = quant
        args.orderType = orderType
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_LiveTradeBuyOpen(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = LiveTradeBuyOpen_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "LiveTradeBuyOpen failed: unknown result")

    def LiveTradeBuyClose(self, sessionID, liveTradeID, sid, price, quant, orderType, closeToday):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - sid
         - price
         - quant
         - orderType
         - closeToday
        """
        self.send_LiveTradeBuyClose(sessionID, liveTradeID, sid, price, quant, orderType, closeToday)
        return self.recv_LiveTradeBuyClose()

    def send_LiveTradeBuyClose(self, sessionID, liveTradeID, sid, price, quant, orderType, closeToday):
        self._oprot.writeMessageBegin('LiveTradeBuyClose', TMessageType.CALL, self._seqid)
        args = LiveTradeBuyClose_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.sid = sid
        args.price = price
        args.quant = quant
        args.orderType = orderType
        args.closeToday = closeToday
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_LiveTradeBuyClose(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = LiveTradeBuyClose_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "LiveTradeBuyClose failed: unknown result")

    def LiveTradeSellClose(self, sessionID, liveTradeID, sid, price, quant, orderType, closeToday):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - sid
         - price
         - quant
         - orderType
         - closeToday
        """
        self.send_LiveTradeSellClose(sessionID, liveTradeID, sid, price, quant, orderType, closeToday)
        return self.recv_LiveTradeSellClose()

    def send_LiveTradeSellClose(self, sessionID, liveTradeID, sid, price, quant, orderType, closeToday):
        self._oprot.writeMessageBegin('LiveTradeSellClose', TMessageType.CALL, self._seqid)
        args = LiveTradeSellClose_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.sid = sid
        args.price = price
        args.quant = quant
        args.orderType = orderType
        args.closeToday = closeToday
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_LiveTradeSellClose(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = LiveTradeSellClose_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "LiveTradeSellClose failed: unknown result")

    def LiveTradeSellOpen(self, sessionID, liveTradeID, sid, price, quant, orderType):
        """
        Parameters:
         - sessionID
         - liveTradeID
         - sid
         - price
         - quant
         - orderType
        """
        self.send_LiveTradeSellOpen(sessionID, liveTradeID, sid, price, quant, orderType)
        return self.recv_LiveTradeSellOpen()

    def send_LiveTradeSellOpen(self, sessionID, liveTradeID, sid, price, quant, orderType):
        self._oprot.writeMessageBegin('LiveTradeSellOpen', TMessageType.CALL, self._seqid)
        args = LiveTradeSellOpen_args()
        args.sessionID = sessionID
        args.liveTradeID = liveTradeID
        args.sid = sid
        args.price = price
        args.quant = quant
        args.orderType = orderType
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_LiveTradeSellOpen(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = LiveTradeSellOpen_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "LiveTradeSellOpen failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["Running"] = Processor.process_Running
        self._processMap["GetPID"] = Processor.process_GetPID
        self._processMap["KeepAlive"] = Processor.process_KeepAlive
        self._processMap["LiveTradeLogin"] = Processor.process_LiveTradeLogin
        self._processMap["LiveTradeLogout"] = Processor.process_LiveTradeLogout
        self._processMap["GetAccountState"] = Processor.process_GetAccountState
        self._processMap["GetAccountBalance"] = Processor.process_GetAccountBalance
        self._processMap["GetHoldingStock"] = Processor.process_GetHoldingStock
        self._processMap["GetAllOrder"] = Processor.process_GetAllOrder
        self._processMap["GetOrderState"] = Processor.process_GetOrderState
        self._processMap["GetAccountInfo"] = Processor.process_GetAccountInfo
        self._processMap["CancelOrder"] = Processor.process_CancelOrder
        self._processMap["CloseOrder"] = Processor.process_CloseOrder
        self._processMap["LiveTradeBuyOpen"] = Processor.process_LiveTradeBuyOpen
        self._processMap["LiveTradeBuyClose"] = Processor.process_LiveTradeBuyClose
        self._processMap["LiveTradeSellClose"] = Processor.process_LiveTradeSellClose
        self._processMap["LiveTradeSellOpen"] = Processor.process_LiveTradeSellOpen

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_Running(self, seqid, iprot, oprot):
        args = Running_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = Running_result()
        try:
            result.success = self._handler.Running()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("Running", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetPID(self, seqid, iprot, oprot):
        args = GetPID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetPID_result()
        try:
            result.success = self._handler.GetPID()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetPID", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_KeepAlive(self, seqid, iprot, oprot):
        args = KeepAlive_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = KeepAlive_result()
        try:
            self._handler.KeepAlive(args.sessionID)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("KeepAlive", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_LiveTradeLogin(self, seqid, iprot, oprot):
        args = LiveTradeLogin_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = LiveTradeLogin_result()
        try:
            result.success = self._handler.LiveTradeLogin(args.sessionID, args.account, args.password1, args.password2, args.brokerStr)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("LiveTradeLogin", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_LiveTradeLogout(self, seqid, iprot, oprot):
        args = LiveTradeLogout_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = LiveTradeLogout_result()
        try:
            result.success = self._handler.LiveTradeLogout(args.sessionID, args.liveTradeID)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("LiveTradeLogout", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetAccountState(self, seqid, iprot, oprot):
        args = GetAccountState_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetAccountState_result()
        try:
            result.success = self._handler.GetAccountState(args.sessionID, args.liveTradeID)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetAccountState", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetAccountBalance(self, seqid, iprot, oprot):
        args = GetAccountBalance_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetAccountBalance_result()
        try:
            result.success = self._handler.GetAccountBalance(args.sessionID, args.liveTradeID)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetAccountBalance", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetHoldingStock(self, seqid, iprot, oprot):
        args = GetHoldingStock_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetHoldingStock_result()
        try:
            result.success = self._handler.GetHoldingStock(args.sessionID, args.liveTradeID)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetHoldingStock", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetAllOrder(self, seqid, iprot, oprot):
        args = GetAllOrder_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetAllOrder_result()
        try:
            result.success = self._handler.GetAllOrder(args.sessionID, args.liveTradeID)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetAllOrder", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetOrderState(self, seqid, iprot, oprot):
        args = GetOrderState_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetOrderState_result()
        try:
            result.success = self._handler.GetOrderState(args.sessionID, args.liveTradeID, args.orderID)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetOrderState", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_GetAccountInfo(self, seqid, iprot, oprot):
        args = GetAccountInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = GetAccountInfo_result()
        try:
            result.success = self._handler.GetAccountInfo(args.sessionID, args.liveTradeID, args.key)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("GetAccountInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_CancelOrder(self, seqid, iprot, oprot):
        args = CancelOrder_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CancelOrder_result()
        try:
            result.success = self._handler.CancelOrder(args.sessionID, args.liveTradeID, args.orderID)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("CancelOrder", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_CloseOrder(self, seqid, iprot, oprot):
        args = CloseOrder_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = CloseOrder_result()
        try:
            result.success = self._handler.CloseOrder(args.sessionID, args.liveTradeID, args.orderID)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("CloseOrder", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_LiveTradeBuyOpen(self, seqid, iprot, oprot):
        args = LiveTradeBuyOpen_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = LiveTradeBuyOpen_result()
        try:
            result.success = self._handler.LiveTradeBuyOpen(args.sessionID, args.liveTradeID, args.sid, args.price, args.quant, args.orderType)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("LiveTradeBuyOpen", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_LiveTradeBuyClose(self, seqid, iprot, oprot):
        args = LiveTradeBuyClose_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = LiveTradeBuyClose_result()
        try:
            result.success = self._handler.LiveTradeBuyClose(args.sessionID, args.liveTradeID, args.sid, args.price, args.quant, args.orderType, args.closeToday)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("LiveTradeBuyClose", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_LiveTradeSellClose(self, seqid, iprot, oprot):
        args = LiveTradeSellClose_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = LiveTradeSellClose_result()
        try:
            result.success = self._handler.LiveTradeSellClose(args.sessionID, args.liveTradeID, args.sid, args.price, args.quant, args.orderType, args.closeToday)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("LiveTradeSellClose", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_LiveTradeSellOpen(self, seqid, iprot, oprot):
        args = LiveTradeSellOpen_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = LiveTradeSellOpen_result()
        try:
            result.success = self._handler.LiveTradeSellOpen(args.sessionID, args.liveTradeID, args.sid, args.price, args.quant, args.orderType)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("LiveTradeSellOpen", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class Running_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Running_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Running_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Running_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetPID_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetPID_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetPID_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetPID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class KeepAlive_args(object):
    """
    Attributes:
     - sessionID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
    )

    def __init__(self, sessionID=None,):
        self.sessionID = sessionID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('KeepAlive_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class KeepAlive_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('KeepAlive_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeLogin_args(object):
    """
    Attributes:
     - sessionID
     - account
     - password1
     - password2
     - brokerStr
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'account', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'password1', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'password2', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'brokerStr', 'UTF8', None, ),  # 5
    )

    def __init__(self, sessionID=None, account=None, password1=None, password2=None, brokerStr=None,):
        self.sessionID = sessionID
        self.account = account
        self.password1 = password1
        self.password2 = password2
        self.brokerStr = brokerStr

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.account = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.brokerStr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeLogin_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.account is not None:
            oprot.writeFieldBegin('account', TType.STRING, 2)
            oprot.writeString(self.account.encode('utf-8') if sys.version_info[0] == 2 else self.account)
            oprot.writeFieldEnd()
        if self.password1 is not None:
            oprot.writeFieldBegin('password1', TType.STRING, 3)
            oprot.writeString(self.password1.encode('utf-8') if sys.version_info[0] == 2 else self.password1)
            oprot.writeFieldEnd()
        if self.password2 is not None:
            oprot.writeFieldBegin('password2', TType.STRING, 4)
            oprot.writeString(self.password2.encode('utf-8') if sys.version_info[0] == 2 else self.password2)
            oprot.writeFieldEnd()
        if self.brokerStr is not None:
            oprot.writeFieldBegin('brokerStr', TType.STRING, 5)
            oprot.writeString(self.brokerStr.encode('utf-8') if sys.version_info[0] == 2 else self.brokerStr)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeLogin_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (LiveTradeLoginResp, LiveTradeLoginResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = LiveTradeLoginResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeLogin_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeLogout_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
    )

    def __init__(self, sessionID=None, liveTradeID=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeLogout_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeLogout_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (LiveTradeLogoutResp, LiveTradeLogoutResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = LiveTradeLogoutResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeLogout_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAccountState_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
    )

    def __init__(self, sessionID=None, liveTradeID=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAccountState_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAccountState_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (GetAccountStateResp, GetAccountStateResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetAccountStateResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAccountState_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAccountBalance_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
    )

    def __init__(self, sessionID=None, liveTradeID=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAccountBalance_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAccountBalance_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (GetAccountBalanceResp, GetAccountBalanceResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetAccountBalanceResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAccountBalance_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetHoldingStock_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
    )

    def __init__(self, sessionID=None, liveTradeID=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetHoldingStock_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetHoldingStock_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (GetHoldingStockResp, GetHoldingStockResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetHoldingStockResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetHoldingStock_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAllOrder_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
    )

    def __init__(self, sessionID=None, liveTradeID=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAllOrder_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAllOrder_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (GetAllOrderResp, GetAllOrderResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetAllOrderResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAllOrder_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetOrderState_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
     - orderID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'orderID', 'UTF8', None, ),  # 3
    )

    def __init__(self, sessionID=None, liveTradeID=None, orderID=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID
        self.orderID = orderID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.orderID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetOrderState_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        if self.orderID is not None:
            oprot.writeFieldBegin('orderID', TType.STRING, 3)
            oprot.writeString(self.orderID.encode('utf-8') if sys.version_info[0] == 2 else self.orderID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetOrderState_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (GetOrderStateResp, GetOrderStateResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetOrderStateResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetOrderState_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAccountInfo_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
     - key
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'key', 'UTF8', None, ),  # 3
    )

    def __init__(self, sessionID=None, liveTradeID=None, key=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID
        self.key = key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAccountInfo_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 3)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAccountInfo_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (GetAccountInfoResp, GetAccountInfoResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetAccountInfoResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GetAccountInfo_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CancelOrder_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
     - orderID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'orderID', 'UTF8', None, ),  # 3
    )

    def __init__(self, sessionID=None, liveTradeID=None, orderID=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID
        self.orderID = orderID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.orderID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CancelOrder_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        if self.orderID is not None:
            oprot.writeFieldBegin('orderID', TType.STRING, 3)
            oprot.writeString(self.orderID.encode('utf-8') if sys.version_info[0] == 2 else self.orderID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CancelOrder_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (CancelOrderResp, CancelOrderResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = CancelOrderResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CancelOrder_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CloseOrder_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
     - orderID
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'orderID', 'UTF8', None, ),  # 3
    )

    def __init__(self, sessionID=None, liveTradeID=None, orderID=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID
        self.orderID = orderID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.orderID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CloseOrder_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        if self.orderID is not None:
            oprot.writeFieldBegin('orderID', TType.STRING, 3)
            oprot.writeString(self.orderID.encode('utf-8') if sys.version_info[0] == 2 else self.orderID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CloseOrder_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (CloseOrderResp, CloseOrderResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = CloseOrderResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CloseOrder_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeBuyOpen_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
     - sid
     - price
     - quant
     - orderType
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'sid', 'UTF8', None, ),  # 3
        (4, TType.DOUBLE, 'price', None, None, ),  # 4
        (5, TType.DOUBLE, 'quant', None, None, ),  # 5
        (6, TType.STRING, 'orderType', 'UTF8', None, ),  # 6
    )

    def __init__(self, sessionID=None, liveTradeID=None, sid=None, price=None, quant=None, orderType=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID
        self.sid = sid
        self.price = price
        self.quant = quant
        self.orderType = orderType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.price = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.quant = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.orderType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeBuyOpen_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 3)
            oprot.writeString(self.sid.encode('utf-8') if sys.version_info[0] == 2 else self.sid)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.DOUBLE, 4)
            oprot.writeDouble(self.price)
            oprot.writeFieldEnd()
        if self.quant is not None:
            oprot.writeFieldBegin('quant', TType.DOUBLE, 5)
            oprot.writeDouble(self.quant)
            oprot.writeFieldEnd()
        if self.orderType is not None:
            oprot.writeFieldBegin('orderType', TType.STRING, 6)
            oprot.writeString(self.orderType.encode('utf-8') if sys.version_info[0] == 2 else self.orderType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeBuyOpen_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (PlaceOrderResp, PlaceOrderResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = PlaceOrderResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeBuyOpen_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeBuyClose_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
     - sid
     - price
     - quant
     - orderType
     - closeToday
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'sid', 'UTF8', None, ),  # 3
        (4, TType.DOUBLE, 'price', None, None, ),  # 4
        (5, TType.DOUBLE, 'quant', None, None, ),  # 5
        (6, TType.STRING, 'orderType', 'UTF8', None, ),  # 6
        (7, TType.BOOL, 'closeToday', None, None, ),  # 7
    )

    def __init__(self, sessionID=None, liveTradeID=None, sid=None, price=None, quant=None, orderType=None, closeToday=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID
        self.sid = sid
        self.price = price
        self.quant = quant
        self.orderType = orderType
        self.closeToday = closeToday

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.price = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.quant = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.orderType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.closeToday = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeBuyClose_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 3)
            oprot.writeString(self.sid.encode('utf-8') if sys.version_info[0] == 2 else self.sid)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.DOUBLE, 4)
            oprot.writeDouble(self.price)
            oprot.writeFieldEnd()
        if self.quant is not None:
            oprot.writeFieldBegin('quant', TType.DOUBLE, 5)
            oprot.writeDouble(self.quant)
            oprot.writeFieldEnd()
        if self.orderType is not None:
            oprot.writeFieldBegin('orderType', TType.STRING, 6)
            oprot.writeString(self.orderType.encode('utf-8') if sys.version_info[0] == 2 else self.orderType)
            oprot.writeFieldEnd()
        if self.closeToday is not None:
            oprot.writeFieldBegin('closeToday', TType.BOOL, 7)
            oprot.writeBool(self.closeToday)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeBuyClose_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (PlaceOrderResp, PlaceOrderResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = PlaceOrderResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeBuyClose_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeSellClose_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
     - sid
     - price
     - quant
     - orderType
     - closeToday
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'sid', 'UTF8', None, ),  # 3
        (4, TType.DOUBLE, 'price', None, None, ),  # 4
        (5, TType.DOUBLE, 'quant', None, None, ),  # 5
        (6, TType.STRING, 'orderType', 'UTF8', None, ),  # 6
        (7, TType.BOOL, 'closeToday', None, None, ),  # 7
    )

    def __init__(self, sessionID=None, liveTradeID=None, sid=None, price=None, quant=None, orderType=None, closeToday=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID
        self.sid = sid
        self.price = price
        self.quant = quant
        self.orderType = orderType
        self.closeToday = closeToday

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.price = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.quant = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.orderType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.closeToday = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeSellClose_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 3)
            oprot.writeString(self.sid.encode('utf-8') if sys.version_info[0] == 2 else self.sid)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.DOUBLE, 4)
            oprot.writeDouble(self.price)
            oprot.writeFieldEnd()
        if self.quant is not None:
            oprot.writeFieldBegin('quant', TType.DOUBLE, 5)
            oprot.writeDouble(self.quant)
            oprot.writeFieldEnd()
        if self.orderType is not None:
            oprot.writeFieldBegin('orderType', TType.STRING, 6)
            oprot.writeString(self.orderType.encode('utf-8') if sys.version_info[0] == 2 else self.orderType)
            oprot.writeFieldEnd()
        if self.closeToday is not None:
            oprot.writeFieldBegin('closeToday', TType.BOOL, 7)
            oprot.writeBool(self.closeToday)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeSellClose_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (PlaceOrderResp, PlaceOrderResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = PlaceOrderResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeSellClose_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeSellOpen_args(object):
    """
    Attributes:
     - sessionID
     - liveTradeID
     - sid
     - price
     - quant
     - orderType
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sessionID', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'liveTradeID', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'sid', 'UTF8', None, ),  # 3
        (4, TType.DOUBLE, 'price', None, None, ),  # 4
        (5, TType.DOUBLE, 'quant', None, None, ),  # 5
        (6, TType.STRING, 'orderType', 'UTF8', None, ),  # 6
    )

    def __init__(self, sessionID=None, liveTradeID=None, sid=None, price=None, quant=None, orderType=None,):
        self.sessionID = sessionID
        self.liveTradeID = liveTradeID
        self.sid = sid
        self.price = price
        self.quant = quant
        self.orderType = orderType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.liveTradeID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.price = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.quant = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.orderType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeSellOpen_args')
        if self.sessionID is not None:
            oprot.writeFieldBegin('sessionID', TType.STRING, 1)
            oprot.writeString(self.sessionID.encode('utf-8') if sys.version_info[0] == 2 else self.sessionID)
            oprot.writeFieldEnd()
        if self.liveTradeID is not None:
            oprot.writeFieldBegin('liveTradeID', TType.STRING, 2)
            oprot.writeString(self.liveTradeID.encode('utf-8') if sys.version_info[0] == 2 else self.liveTradeID)
            oprot.writeFieldEnd()
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 3)
            oprot.writeString(self.sid.encode('utf-8') if sys.version_info[0] == 2 else self.sid)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.DOUBLE, 4)
            oprot.writeDouble(self.price)
            oprot.writeFieldEnd()
        if self.quant is not None:
            oprot.writeFieldBegin('quant', TType.DOUBLE, 5)
            oprot.writeDouble(self.quant)
            oprot.writeFieldEnd()
        if self.orderType is not None:
            oprot.writeFieldBegin('orderType', TType.STRING, 6)
            oprot.writeString(self.orderType.encode('utf-8') if sys.version_info[0] == 2 else self.orderType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiveTradeSellOpen_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (PlaceOrderResp, PlaceOrderResp.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = PlaceOrderResp()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LiveTradeSellOpen_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
