/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AlphaConfig_H
#define AlphaConfig_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "alpha_config_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AlphaConfigIf {
 public:
  virtual ~AlphaConfigIf() {}
  virtual void GetConfig(ConfigData& _return, const std::string& str1, const std::string& str2) = 0;
  virtual void Report(const std::map<std::string, std::string> & data) = 0;
};

class AlphaConfigIfFactory {
 public:
  typedef AlphaConfigIf Handler;

  virtual ~AlphaConfigIfFactory() {}

  virtual AlphaConfigIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AlphaConfigIf* /* handler */) = 0;
};

class AlphaConfigIfSingletonFactory : virtual public AlphaConfigIfFactory {
 public:
  AlphaConfigIfSingletonFactory(const boost::shared_ptr<AlphaConfigIf>& iface) : iface_(iface) {}
  virtual ~AlphaConfigIfSingletonFactory() {}

  virtual AlphaConfigIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AlphaConfigIf* /* handler */) {}

 protected:
  boost::shared_ptr<AlphaConfigIf> iface_;
};

class AlphaConfigNull : virtual public AlphaConfigIf {
 public:
  virtual ~AlphaConfigNull() {}
  void GetConfig(ConfigData& /* _return */, const std::string& /* str1 */, const std::string& /* str2 */) {
    return;
  }
  void Report(const std::map<std::string, std::string> & /* data */) {
    return;
  }
};

typedef struct _AlphaConfig_GetConfig_args__isset {
  _AlphaConfig_GetConfig_args__isset() : str1(false), str2(false) {}
  bool str1 :1;
  bool str2 :1;
} _AlphaConfig_GetConfig_args__isset;

class AlphaConfig_GetConfig_args {
 public:

  AlphaConfig_GetConfig_args(const AlphaConfig_GetConfig_args&);
  AlphaConfig_GetConfig_args& operator=(const AlphaConfig_GetConfig_args&);
  AlphaConfig_GetConfig_args() : str1(), str2() {
  }

  virtual ~AlphaConfig_GetConfig_args() throw();
  std::string str1;
  std::string str2;

  _AlphaConfig_GetConfig_args__isset __isset;

  void __set_str1(const std::string& val);

  void __set_str2(const std::string& val);

  bool operator == (const AlphaConfig_GetConfig_args & rhs) const
  {
    if (!(str1 == rhs.str1))
      return false;
    if (!(str2 == rhs.str2))
      return false;
    return true;
  }
  bool operator != (const AlphaConfig_GetConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaConfig_GetConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaConfig_GetConfig_pargs {
 public:


  virtual ~AlphaConfig_GetConfig_pargs() throw();
  const std::string* str1;
  const std::string* str2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaConfig_GetConfig_result__isset {
  _AlphaConfig_GetConfig_result__isset() : success(false) {}
  bool success :1;
} _AlphaConfig_GetConfig_result__isset;

class AlphaConfig_GetConfig_result {
 public:

  AlphaConfig_GetConfig_result(const AlphaConfig_GetConfig_result&);
  AlphaConfig_GetConfig_result& operator=(const AlphaConfig_GetConfig_result&);
  AlphaConfig_GetConfig_result() {
  }

  virtual ~AlphaConfig_GetConfig_result() throw();
  ConfigData success;

  _AlphaConfig_GetConfig_result__isset __isset;

  void __set_success(const ConfigData& val);

  bool operator == (const AlphaConfig_GetConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AlphaConfig_GetConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaConfig_GetConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AlphaConfig_GetConfig_presult__isset {
  _AlphaConfig_GetConfig_presult__isset() : success(false) {}
  bool success :1;
} _AlphaConfig_GetConfig_presult__isset;

class AlphaConfig_GetConfig_presult {
 public:


  virtual ~AlphaConfig_GetConfig_presult() throw();
  ConfigData* success;

  _AlphaConfig_GetConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AlphaConfig_Report_args__isset {
  _AlphaConfig_Report_args__isset() : data(false) {}
  bool data :1;
} _AlphaConfig_Report_args__isset;

class AlphaConfig_Report_args {
 public:

  AlphaConfig_Report_args(const AlphaConfig_Report_args&);
  AlphaConfig_Report_args& operator=(const AlphaConfig_Report_args&);
  AlphaConfig_Report_args() {
  }

  virtual ~AlphaConfig_Report_args() throw();
  std::map<std::string, std::string>  data;

  _AlphaConfig_Report_args__isset __isset;

  void __set_data(const std::map<std::string, std::string> & val);

  bool operator == (const AlphaConfig_Report_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AlphaConfig_Report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaConfig_Report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaConfig_Report_pargs {
 public:


  virtual ~AlphaConfig_Report_pargs() throw();
  const std::map<std::string, std::string> * data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaConfig_Report_result {
 public:

  AlphaConfig_Report_result(const AlphaConfig_Report_result&);
  AlphaConfig_Report_result& operator=(const AlphaConfig_Report_result&);
  AlphaConfig_Report_result() {
  }

  virtual ~AlphaConfig_Report_result() throw();

  bool operator == (const AlphaConfig_Report_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AlphaConfig_Report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AlphaConfig_Report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AlphaConfig_Report_presult {
 public:


  virtual ~AlphaConfig_Report_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AlphaConfigClient : virtual public AlphaConfigIf {
 public:
  AlphaConfigClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AlphaConfigClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetConfig(ConfigData& _return, const std::string& str1, const std::string& str2);
  void send_GetConfig(const std::string& str1, const std::string& str2);
  void recv_GetConfig(ConfigData& _return);
  void Report(const std::map<std::string, std::string> & data);
  void send_Report(const std::map<std::string, std::string> & data);
  void recv_Report();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AlphaConfigProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AlphaConfigIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AlphaConfigProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AlphaConfigProcessor(boost::shared_ptr<AlphaConfigIf> iface) :
    iface_(iface) {
    processMap_["GetConfig"] = &AlphaConfigProcessor::process_GetConfig;
    processMap_["Report"] = &AlphaConfigProcessor::process_Report;
  }

  virtual ~AlphaConfigProcessor() {}
};

class AlphaConfigProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AlphaConfigProcessorFactory(const ::boost::shared_ptr< AlphaConfigIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AlphaConfigIfFactory > handlerFactory_;
};

class AlphaConfigMultiface : virtual public AlphaConfigIf {
 public:
  AlphaConfigMultiface(std::vector<boost::shared_ptr<AlphaConfigIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AlphaConfigMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AlphaConfigIf> > ifaces_;
  AlphaConfigMultiface() {}
  void add(boost::shared_ptr<AlphaConfigIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetConfig(ConfigData& _return, const std::string& str1, const std::string& str2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetConfig(_return, str1, str2);
    }
    ifaces_[i]->GetConfig(_return, str1, str2);
    return;
  }

  void Report(const std::map<std::string, std::string> & data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Report(data);
    }
    ifaces_[i]->Report(data);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AlphaConfigConcurrentClient : virtual public AlphaConfigIf {
 public:
  AlphaConfigConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AlphaConfigConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetConfig(ConfigData& _return, const std::string& str1, const std::string& str2);
  int32_t send_GetConfig(const std::string& str1, const std::string& str2);
  void recv_GetConfig(ConfigData& _return, const int32_t seqid);
  void Report(const std::map<std::string, std::string> & data);
  int32_t send_Report(const std::map<std::string, std::string> & data);
  void recv_Report(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
