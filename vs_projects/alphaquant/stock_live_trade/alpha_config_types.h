/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef alpha_config_TYPES_H
#define alpha_config_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class ServerItem;

class ConfigData;

typedef struct _ServerItem__isset {
  _ServerItem__isset() : host(false), port(false) {}
  bool host :1;
  bool port :1;
} _ServerItem__isset;

class ServerItem : public virtual ::apache::thrift::TBase {
 public:

  ServerItem(const ServerItem&);
  ServerItem& operator=(const ServerItem&);
  ServerItem() : host(), port(0) {
  }

  virtual ~ServerItem() throw();
  std::string host;
  int32_t port;

  _ServerItem__isset __isset;

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const ServerItem & rhs) const
  {
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const ServerItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServerItem &a, ServerItem &b);

inline std::ostream& operator<<(std::ostream& out, const ServerItem& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ConfigData__isset {
  _ConfigData__isset() : broker_server(false), license_data(false) {}
  bool broker_server :1;
  bool license_data :1;
} _ConfigData__isset;

class ConfigData : public virtual ::apache::thrift::TBase {
 public:

  ConfigData(const ConfigData&);
  ConfigData& operator=(const ConfigData&);
  ConfigData() {
  }

  virtual ~ConfigData() throw();
  std::map<std::string, std::vector<ServerItem> >  broker_server;
  std::map<std::string, std::string>  license_data;

  _ConfigData__isset __isset;

  void __set_broker_server(const std::map<std::string, std::vector<ServerItem> > & val);

  void __set_license_data(const std::map<std::string, std::string> & val);

  bool operator == (const ConfigData & rhs) const
  {
    if (!(broker_server == rhs.broker_server))
      return false;
    if (!(license_data == rhs.license_data))
      return false;
    return true;
  }
  bool operator != (const ConfigData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ConfigData &a, ConfigData &b);

inline std::ostream& operator<<(std::ostream& out, const ConfigData& obj)
{
  obj.printTo(out);
  return out;
}



#endif
